[GENERAL]
description = C. elegans (current release)
database    = c_elegans

# where to link to when user clicks in detailed view
link             = /get?name=$name;class=$class
initial landmark = III:9060076..9071672

default tracks = PRIMARY_GENE_TRACK CLASSICAL_ALLELES POLYMORPHISMS LOCI:overview

# examples to show in the introduction
examples = IV 
	   IV:20,000..30,000 
	   unc-49
	   dpy-*
           rhodopsin
	   B0019 
	   PCR_product:sjj_B0019.1
           ttattaaacaatttaa
	   
# "automatic" classes to try when an unqualified identifier is given
automatic classes = Transcript Locus Gene GMap PCR_product Operon Genbank Variation Allele CDS Transposon Sequence Clone Pseudogene


# Override the [DETAIL SELECT MENU] from detail_select_menu.conf
# C. elegans has a custom detail select menu.
#include includes/detail_menu-c_elegans.conf

# Plugin configuration
#include includes/plugin.conf


[MotifFinder:plugin]
matrix = matrices.txt

[Aligner:plugin]
alignable_tracks   = ESTB ESTO mRNAB
upcase_tracks      = CDS tRNA NG
align_default      = ESTB
upcase_default     = CDS
#ragged_default     = 10

[OligoFinder:plugin]
search_segments = I II III IV V X


# what to show in the overview section
[LOCI:overview]
feature       = gene:landmark
label         = sub {
		my $f = shift;
		return join(", ", $f->get_tag_values('Locus'));
	}
glyph         = generic
bgcolor       = lavender
key           = Landmarks
height        = 5

###################################
# Global track defaults.
# Can be overridden by any track
###################################
[TRACK DEFAULTS]
#include includes/track_defaults.conf

#################################
# database definitions
#################################
[c_elegans:database]
db_adaptor  = Bio::DB::SeqFeature::Store
db_args     = -adaptor DBI::mysql
              -dsn c_elegans_PRJNA13758_WS239_gff3_test
              -user nobody
passwd      =

# Aggregator format: 
# name{method,method,method/method of parent feature}
# Then to aggregate these in a track:
# aggregator_name:Source
# NOTE: aggregators are processed in the order in which they appear, so
# we would like the full transcript to take precedence over RNAs.
# wormbase_cds: history gene models
# coding: [CDS]
aggregators = pseudo{exon:Pseudogene,intron:Pseudogene/Pseudogene}	      	      
	      non_coding_transcript_isoform{exon/nc_primary_transcript}	      
	      non_coding_transcript{exon/ncRNA_primary_transcript}	      
    	      transposon_cds{coding_exon,intron/transposable_element}
    	      transposon_pseudogene{exon,intron/transposable_element}
              clone 
     	      alignment 	      
	      full_transcript{coding_exon,five_prime_UTR,three_prime_UTR/Transcript}
	      RNA{exon/Transcript}
	      curated_gene{coding_exon/CDS}	      
    	      ngasp_gene{CDS,three_prime_UTR,five_prime_UTR/Transcript}
	      processed_transcript{coding_exon,five_prime_UTR,three_prime_UTR/CDS}
	      coding{coding_exon}
    	      motif_span{motif_segment/Motif}
    	      rnai{RNAi_reagent}
	      ost{expressed_sequence_match}
	      sage_tag{SAGE_tag}
	      wormbase_cds{coding_exon,CDS,five_prime_UTR,three_prime_UTR/CDS}
	      trna_transcript{exon/Transcript}

#	      trna_transcript{exon/tRNA} # which is it?
search options = default +wildcard -stem +fulltext +autocomplete

[modencode_henikoff:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql       
                -dsn    modencode_henikoff
                -user   nobody            
search options = default +wildcard -stem +fulltext +autocomplete


[modencode_hillier_genelets:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_hillier_genelets
                -user   nobody
search options = exact
search options = default +wildcard -stem +fulltext +autocomplete

[modencode_hillier_itranscripts:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_hillier_itranscripts
                -user   nobody
search options = exact


[modencode_lieb:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_lieb
                -user   nobody
search options = exact

[modencode_piano:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_piano
                -user   nobody
search options = exact

[modencode_snyder:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_snyder
                -user   nobody
search options = exact

[modencode_waterston:database]
db_adaptor    = Bio::DB::SeqFeature::Store
db_args       = -adaptor DBI::mysql
                -dsn    modencode_waterston
                -user   nobody
search options = exact



################################################
# GENE MODELS
################################################
[PRIMARY_GENE_TRACK]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.
# Core gene model configuration; height, bgcolor, category, key, etc.
#include includes/gene_models-core.track
# Two different types of ncRNA transcript: Non_coding_transcript:nc_primary_transcript

# TH: There should be MANY different types of ncRNA tracks... Where are they?
feature  = gene:WormBase
glyph    = gene
title    = Curated gene set $name
label    = sub { 
		my $feature = shift;
		my $desc = $feature->attributes('Locus');
		my $name = $feature->display_name;
		return $desc =~ /(\w{3,4}-\d+\.?\d*)$/ ? "$1 ($name)" : $name;
	}
link = sub {
	my $f = shift;
	return if $f->method eq 'RNAz';
	my $name = $f->attributes('Gene') || $f->name;
	return "/get?name=$name;class=Gene";
	}
description  = sub {	     
	my $feature = shift;
	my $notes = join ' ',$feature->notes;
        $notes = 'pseudogene' if $feature->source =~ /pseudogene/i;
	$notes = 'tRNA'       if $feature->source =~ /trna/i;
	return $notes;
       }

[PRIMARY_GENE_TRACK:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description  = 0

# [CODING_TRANSCRIPTS]
#include includes/coding_transcripts.track

# [DNA]
#include includes/dna.track

# [CDS]
#include includes/cds-gff3.track

# [HISTORICAL_GENES]
#include includes/historical_genes.track



[TRANSPOSONS]
category     = Genes
key          = Transposons
feature      = transposable_element:Transposon
glyph        = segments
bgcolor      = gray
fgcolor      = black
utr_color    = gray
font2color   = blue
height       = 6
title        = Transposon $name
label        = sub { 
 	        my $feature = shift;
		my $desc = join ' ',$feature->notes;
		my $name = $feature->display_name;
		my $gene = $feature->Gene;
		return $desc =~ /(\w{3,4}-\d+\.?\d*)$/ ? "$1 ($name)" : $name;
	}
description  = sub {	     
                      my $f    = shift;
		      my $s    = $f->source;		      
		      my $notes = join '; ',$f->notes if $f->notes;
		      return $notes;
                }
link = sub {
	my $f = shift;	
	my $name = $f->attributes('Gene') || $f->name;
	return "/get?name=$name;class=Gene";
	}
citation = These are transposon spans reviewed by WormBase curators.

[TRANSPOSONS:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = gray
description = 0


[TRANSPOSON_GENES]
category     = Genes
key          = Transposon Genes
# Non-aggregated top-level features: transposable_element_CDS:Transposon_CDS, transposable_element_pseudogene:Transposon_Pseudogene
feature      = transposon_cds:Transposon_CDS # Aggregate.
               transposon_pseudogene:Transposon_Pseudogene # Aggregate.
glyph    = sub { 
	 my $f = shift;
	 my ($source) = $f->source;	 	 	 
	 return 'transcript2';	 
	 }
bgcolor      = sub {
		     my $f = shift;
		     my $name = $f->name;                       
		     my $s = $f->source;
		     if ($s =~ /CDS/) {	
		         return 'violet' if $f->strand > 0;
		         return 'turquoise';
		     } else { 
		          return 'gray';
		     }
		}
fgcolor      = black
utr_color    = gray
font2color   = blue
height       = 6
balloon hover  = sub {
                      my $f    = shift;
	              my $name = $f->name;                       
		      my $s = $f->source;
		      my $type = $s =~ /CDS/ ? 'transposon CDS' : 'transposon pseudogene';
    		      my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
		      my $notes = $f->notes;
		      my $string = join('<br />',"<b>$name</b>",$type,"position: $ref:$start..$stop",
		      	 "notes: $notes");
	 	      return $string;    		      
	       } 
title    = Transposon $name
label    = sub { 
		my $feature = shift;
		my $desc = join ' ',$feature->notes;
		my $name = $feature->display_name;
		my $gene = $feature->Gene;
		return $desc =~ /(\w{3,4}-\d+\.?\d*)$/ ? "$1 ($name)" : $name;
	}
description  = sub {	     
                      my $f    = shift;
		      my $s    = $f->source;
		      my $type = $s =~ /CDS/ ? 'transposon CDS' : 'transposon pseudogene';
		      return $type;
                }
link = sub {
	my $f = shift;	
	my $name = $f->attributes('Gene') || $f->name;
	return "/get?name=$name;class=Gene";
	}
citation = These are transposon spans reviewed by WormBase curators.

[TRANSPOSON_GENES:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0


[RNA]
feature      =  ncRNA:RNAz
category     = Genes
glyph        = sub {
		my $feature = shift;
		return 'transcript';
	}
bgcolor      = white
fgcolor      = black
forwardcolor = violet
reversecolor = cyan
utr_color    = gray
font2color   = blue
label        = sub { 
		my $feature = shift;
		my $desc = join ' ',$feature->notes;
		my $name = $feature->display_name;
		return $desc =~ /(\w{3,4}-\d+\.?\d*)$/ ? "$1 ($name)" : $name;
	}
description  = sub {
	my $feature = shift;
	my $notes = join ' ',$feature->notes;
	my $source = $feature->source;
	$notes =~ s/\w{3,4}-\d+$//;   # name is already in label
        return "$notes ($source)" if $notes && $source; 
        return $notes        if $notes && $feature->name !~ /^$notes/; 
        return "($source)"   if $source; 
        return ''; 
    }
balloon hover =  url:/gbrowse_popup?name=$name;class=$class;type=PRIMARY_GENE_TRACK
key          = RNAz non-coding RNA genes
# key          = Predicted non-coding RNAs
link        = sub {
	my $f = shift;
	return if $f->method eq 'RNAz';
	}
citation     = RNAz-derived ncRNAs were predicted using
        the <a href="http://www.tbi.univie.ac.at/~wash/RNAz/">RNAz algorithm</a>.
        Please select the RNA for more details.



#[HISTORICAL]
#glyph        = transcript
#feature      = processed_transcript:history
#bgcolor      = white
#description  = sub { 
#		my $f = shift;
#		my $name = $f->display_name;
#		my ($wp)   = $name =~ /wp(\d+)$/;
#		return $wp ? "(changed; WormPep WP$wp)" : "(obsolete)";
#	}
#citation     = This track shows historical gene models that have been superseded.  The 
#		suffix indicates which WormPep release the gene model was last present
#		in.
#category     = Genes
#key          = Obsolete gene models

[HISTORICAL:75000]
bgcolor      = white
glyph        = generic
strand_arrow = 1

[GENEFINDER]
feature      = processed_transcript:genefinder # TODO This pair does not exist in the data anymore.
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = GeneFinder Predictions

[GENEFINDER:75000]
feature      = CDS:Genefinder
key          = GeneFinder Predictions

[TWINSCAN]
feature      = processed_transcript:twinscan # TODO This pair does not exist in the data anymore.
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = Twinscan Predictions
link         = sub { return undef; }         
 
[TWINSCAN:75000]   
feature      = CDS:twinscan
key          = Twinscan Predictions
link         = sub { return undef; }

[GENEMARKHMM]
feature      = processed_transcript:GeneMarkHMM # TODO This pair does not exist in the data anymore.
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = GeneMarkHMM Predictions
link         = sub { return undef; }         
citation     = These are GeneMarkHMM gene predictions provided by Mark Borodovsky. 


[GENEMARKHMM:75000]   
feature      = CDS:GeneMarkHMM
key          = GeneMarkHMM Predictions
link         = sub { return undef; }

#[MGENE]
#feature      = processed_transcript:mGene
#glyph        = transcript
#category     = Genes
#bgcolor      = palevioletred
#fgcolor      = palevioletred
#key          = mGene Predictions
#link         = sub { return undef; }         
 
#[MGENE:75000]   
#feature      = CDS:mGene
#key          = mGene Predictions
#link         = sub { return undef; }


[JIGSAW]
feature      = processed_transcript:jigsaw # TODO This pair does not exist in the data anymore.
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = Jigsaw Predictions
link         = sub { return undef; }         
 
[JIGSAW:75000]   
feature      = CDS:jigsaw
key          = Jigsaw Predictions
link         = sub { return undef; }


[mSPLICER_TRANSCRIPT]
feature      = processed_transcript:mSplicer_transcript # TODO This pair does not exist in the data anymore.
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = mSplicer
link         = sub { return undef; }         
citation     = mSplicer predict the splice forms for a given start and
	       end of a transcript. (Note that it is not yet a
               full-featured gene-finder.) There are two versions:
               1. "mSplicer" which splices general pre-mRNA (including
               UTR or coding regions) without assuming the existence of a
               reading frame (requires transcription start and stop).
               2. "mSplicer-ORF" is optimized for coding regions and
               requires the knowledge of the translation start and stop.
               These predictions were generated against regions annotated
               in WS160. More details can be found at <a href="http://www.fml.mpg.de/raetsch/projects/msplicer">http://www.fml.mpg.de/raetsch/projects/msplicer</a>.

[mSPLICER_TRANSCRIPT:75000]   
feature      = CDS:mSplicer_transcript
link         = sub { return undef; }

[mSPLICER_ORF]
feature      = processed_transcript:mSplicer_orf # TODO This pair does not exist in the data anymore.
glyph        = transcript
category     = Genes
bgcolor      = palevioletred
fgcolor      = palevioletred
key          = mSplicer-ORF
link         = sub { return undef; }         
citation     = mSplicer predict the splice forms for a given start and
	       end of a transcript. (Note that it is not yet a
               full-featured gene-finder.) There are two versions:
               1. "mSplicer" which splices general pre-mRNA (including
               UTR or coding regions) without assuming the existence of a
               reading frame (requires transcription start and stop).
               2. "mSplicer-ORF" is optimized for coding regions and
               requires the knowledge of the translation start and stop.
               These predictions were generated against regions annotated
               in WS160. More details can be found at <a href="http://www.fml.mpg.de/raetsch/projects/msplicer">http://www.fml.mpg.de/raetsch/projects/msplicer</a>.

[mSPLICER_ORF:75000]   
feature      = CDS:mSplicer_orf
link         = sub { return undef; }


[OP]
feature      = operon:operon
glyph        = generic
category     = Genes
strand_arrow = 1
bgcolor      = green
height       = 10
description  = 1
key          = Operons
citation     = These are operons published by Blumenthal et al, Nature 417: 851-854 (2002).

[OP_DEPRECATED]
feature      = operon:deprecated_operon
glyph        = generic
category     = Genes
strand_arrow = 1
bgcolor      = green
height       = 10
description  = 1
key          = Operons (deprecated)
citation     = These are historical operon predictions.



[TS]
feature      = SL1_acceptor_site SL2_acceptor_site
category     = Genes
glyph        = triangle
#glyph        = sub {
#		my $feature = shift;
#		return $feature->source eq 'SL1' ? 'diamond' : 'triangle';
#	}
point        = 1
orient       = sub {
	my $feature = shift;
	my $strand  = $feature->strand;
	return 'E' if $strand > 0;
	return 'W';
	}
bgcolor      = sub {
	    my $feature = shift;
            return $feature->source eq 'SL1' ? 'red' : 'green';
	}
font2color   = 'red';
height       = 8
label        = 0
label density = 100
description  = sub {
		shift->source;
	}
key          = Trans-spliced acceptor
citation     = These are SL1 and SL2 trans-spliced acceptors published by Blumenthal et al, Nature 417: 851-854 (2002).

# This track shows the approximate physical span of genetic intervals
[GENETIC]
feature       = gene:interpolated_pmap_position
		gene:absolute_pmap_position
key           = Genetic limits
category      = Genes
glyph         = sub {
                    my $f = shift;
                    return ($f->source eq 'interpolated_pmap_position') ? 'span' : 'box';
       }
fgcolor       = black
bgcolor       = sub { my $feature = shift;
		      return ($feature->source eq 'interpolated_pmap_position') ? 'red' : 'turquoise';
	}
link          = sub { my $f   = shift;
                      my $name = $f->name;
   	              return "/get?name=$name;class=Gene";
	}
height        = 3
label         = sub { return shift->name; }
description = sub { my $feature = shift;
	              my $notes = join(' ',$feature->notes);
	              $notes =~ /^\s*(\-?\d{1,2}\.\d*)\s(.*)/;
		      # Reduce sig figs to three
	              my $pos  = $1;
		      my $rest = $2;
     	              $rest =~ s/uncloned|cloned//;  # Remove the status descriptor	
		      $pos  = sprintf("%2.3f",$pos);
		      my $formatted = "$pos $rest";
		      return $formatted;
        }
citation      = This track shows the maximal extents for genetic loci.  
		Loci that have been interpolated onto the physical
                map (and whose precise location is unknown) are shown 
                as a thin black span.  The physical extent of such loci are determined 
                by interpolating their genetic position onto the physical 
                map using 95% confidence limits.  Please note that the actual 
                location of such loci may lay outside of the span depicted.
                Loci with known sequence connections are shown in turquoise 
                and depicted using the physical span of the gene.

[MOTIFS]
# Individual spans
# feature     = motif_segment:translated_feature
# Single, full length spans
# feature     = Motif:translated_feature
# Aggregated features (skip top level feature)
#feature       = motif:translated_feature
feature       = motif_span:translated_feature # TODO This pair does not exist in the data anymore. Aggregate?
key           = Protein motifs
category      = Misc
glyph         = segments
connector     = dashed
connector_color = gray
fgcolor       = black
bgcolor       = sub {
		my $feature = shift;
		my $name = $feature->name;
                return 'magenta'          if ($name =~ /tmhmm/);
                return 'lightseagreen'     if ($name =~ /seg/);
	        return 'aquamarine'    if ($name =~ /signalp/);
       		return 'chartreuse'    if ($name =~ /ncoils/);
		return 'lightsalmon'         if ($name =~ /pfam/);
	}
link          = sub { my $f   = shift;
     		my %notes = map { split /=/ } $f->notes;
                #my $name = $f->name;
                #my ($target) = $name =~ /(WP_.*)\-.*/;
		#$target =~ s/_/:/g;
                return "/get?name=$notes{Protein};class=Protein";
        }
height        = 7
label         = sub { 
		my $f = shift;
		my $name = $f->name;
		#my ($label) = $name =~ /(WP_.*-.*)\.\d/;
                #my ($label) = $name =~ /(.*)\-.*\.\d$/;
		#$label =~ s/_/:/;
		my %notes = map { split /=/ } $f->notes;
		my $label = $notes{Type};
		return $label;
	}
description = sub { my $feature = shift;
		my %notes = map { split /=/ } $feature->notes;
#		my $desc = "$notes{CDS}; aa: $notes{Range}; exon(s): $notes{Exons}";
#		$desc .= "; $notes{Description}" if $notes{Description};
#		my $desc = $notes{Type};
#		$desc .= "; $notes{Description}" if $notes{Description};
		my $desc = $notes{Description};
		return $desc;
	}
citation      = This track shows the extent of predicted protein motifs. Note these
                spans correspond to amino acid coordinates interpolated onto the
                physical map.  Included are signal peptide (signalp), coiled coil (ncoils)
		and transmembrane (tmhmm) domains, regions of low complexity (seg),
                and Pfam annotated motif homologies. 

[G4_MOTIF]
feature       = G_quartet:pmid18538569
category      = Misc
bgcolor       = magenta
fgcolor       = black
height        = 7
connector     = none
key           = G4 Motif
citation      = This track shows the extent of G4 DNA signature. G4 motif is "Intrinsically mutagenic motif, probably
         because it can form secondary structures during DNA replication". Data are from Kruisselbrink E et al. (2008)
         Curr Biol "Mutagenic Capacity of Endogenous G4 DNA Underlies Genome Instability in ....".
 

[MASS_SPEC]
# Individual spans
feature      = translated_nucleotide_match:mass_spec_genome
# Single, full length spans
# feature     = Motif:translated_feature
# Aggregated features (skip top level feature)
key           = Mass spec peptides
category      = Misc
glyph         = segments
draw_target   = 1
show_mismatch = 1
ragged_start  = 1
connector     = dashed
connector_color = gray
fgcolor       = black
bgcolor       = sub {
		my $feature = shift;
		my $name = $feature->name;
		return 'red';
	}
link          = sub { my $f   = shift;
                my $name = $f->name;
                return "/get?name=$name;class=Mass_spec_peptide";
        }
height        = 7
label         = sub { 
		my $f = shift;
		my $name = $f->name;
		$name =~ s/^MSP://;
		return $name;
	}
#group_pattern = /^Mass_spec_peptide:[.*]/
description  = sub { return undef; }
#description = sub { 
#		my $f = shift;
#		my $exons = $f->attributes('Exons_covered');
#		return $exons;
#}
#title   = sub {
#		my $f = shift;
#		return $f->attributes('Exons_covered');
#	}
citation      = This track shows peptides identified in mass spec proteomics
                experiments.

[MASS_SPEC:50000]
feature       = similarity:mass_spec_genome # TODO This pair does not exist in the data anymore.


# Removed at the request of Kevin, 2012.01.12
#[WABA]
#feature       = waba_alignment
#bgcolor       = blue
#glyph         = heterogeneous_segments
#draw_target   = 1
#show_mismatch = 1
#realign       = 0
#category     = Sequence Similarity Tracks
#waba_weak_color   = gainsboro
#waba_strong_color = cornflowerblue
#waba_coding_color = blue
#fgcolor       = black
#height        = 6
#connector     = dashed
#box_subparts  = 0
#key           = Briggsae alignments
#label = sub {	my $feature = shift;
#		my $ref   = $feature->target;
#		my $start = $feature->target->start;
#		my $stop  = $feature->target->end;
#	        my $first = ($feature->segments)[0];
#                my $strand = defined $first && $first->start>$first->end ? -1 : +1;
#		($start,$stop) = ($stop,$start) if $strand < 0;
#	        "$ref:$start..$stop";
#	}
#citation      = These are segments of the C. briggsae rough draft sequence that have been
#	aligned to the C. elegans genome using Jim Kent's WABA program [Kent & Zahler, 
#	Genome Res 10:1115-25 (2000)].
#	WABA distinguishes between low similarity regions (light blue), high-similarity regions
#	(medium blue), and regions of high similarity that have the characteristic wobble-base
#	mismatch of coding regions (dark blue).  Also see "Briggsae Alignments (BLAST)".
#	IMPORTANT NOTE:  Briggsae sequence is available from the GSC BLAST server at 
#	<a href="http://genome.wustl.edu/gsc/Blast/client.pl">http://genome.wustl.edu/gsc/Blast/client.pl</a> and the Sanger BLAST server
#	at <a href="http://www.sanger.ac.uk/Projects/C_briggsae/blast_server.shtml">http://www.sanger.ac.uk/Projects/C_briggsae/blast_server.shtml</a>.
#link = 	sub {
#		my $feature = shift;
#		my $ref   = $feature->target;
#		my $start = $feature->start;
#		my $stop  = $feature->end;
#	        my $first = ($feature->segments)[0];
#                my $strand = defined $first && $first->start>$first->end ? -1 : +1;
#		($start,$stop) = ($stop,$start) if $strand < 0;
#		return "/tools/genome/gbrowse_syn/pecan?search_src=elegans;name=$ref:$start..$stop";
#	}
#title = View this region in the synteny browser
#
#
#[WABA:100000]
#feature       = nucleotide_match:waba_weak nucleotide_match:waba_strong nucleotide_match:waba_coding
#glyph         = generic
#bgcolor       = #E0E0E0


[SYNTENY]
feature       = similarity:synteny # TODO This pair does not exist in the data anymore.
bgcolor       = sub { 
  		  my $f = shift;
	          my ($s) = $f->attributes('Species');
		  warn "SPECIES = $s\n";
		  return $s =~ /briggsae/ ? 'green' : $s =~ /remanei/ ? 'red' : 'purple';
                }
#glyph         = segments
draw_target   = 1
show_mismatch = 1
realign       = 0
category     = Sequence Similarity Tracks (other)
fgcolor       = black
height        = 6
connector     = dashed
box_subparts  = 0
key           = PECAN syntenic alignents
label = sub {	my $feature = shift;
		my $ref   = $feature->target;
		my $start = $feature->target->start;
		my $stop  = $feature->target->end;
	        my $first = ($feature->segments)[0];
                my $strand = defined $first && $first->start>$first->end ? -1 : +1;
		($start,$stop) = ($stop,$start) if $strand < 0;
		my ($species) = $feature->attributes('species');
	        "$ref:$start..$stop ($species)";
	}
citation      = PECAN alignments
link = 	sub {
		my $feature = shift;
		my $ref   = $feature->target;
		my $start = $feature->start;
		my $stop  = $feature->end;
	        my $first = ($feature->segments)[0];
                my $strand = defined $first && $first->start>$first->end ? -1 : +1;
		($start,$stop) = ($stop,$start) if $strand < 0;
		return "http:///mckay.cshl.edu/cgi-bin/gbrowse_syn?name=$ref:$start..$stop;src=compara;search_src=elegans";
	}
title = sub {
		my $f = shift;
		my ($species) = $f->attributes('Species');
		return "PECAN alignment to <i>$species</i>.<br> Click to view this region in the synteny browser";
	}


[SYNTENY:100000]
feature       = similarity:synteny # TODO This pair does not exist in the data anymore.
glyph         = generic
bgcolor       = #E0E0E0

#include includes/standard_analysis_tracks.core.conf

#include includes/standard_analysis_tracks.conf

[ESTB:50000]
feature   = expressed_sequence_match:BLAT_EST_BEST

[ESTB:101]
fontcolor     = black
height        = 5

[ESTO:50000]
feature      = expressed_sequence_match:BLAT_EST_OTHER

[CAENORHABDITIS_ESTS_AND_MRNAS_BEST:50000]
feature   = expressed_sequence_match:BLAT_Caen_EST_BEST
	    expressed_sequence_match:BLAT_Caen_mRNA_BEST

[CAENORHABDITIS_ESTS_AND_MRNAS_OTHER:50000]
feature   = expressed_sequence_match:BLAT_Caen_EST_OTHER
	    expressed_sequence_match:BLAT_Caen_mRNA_OTHER

[NEMATODE_ESTS:50000]
feature   = expressed_sequence_match:EMBL_nematode_cDNAs-BLAT

[NEMBASE_ESTS:50000]
feature   = expressed_sequence_match:NEMBASE_cDNAs-BLAT

[WASHU_ESTS:50000]
feature   = expressed_sequence_match:NEMATODE.NET_cDNAs-BLAT


[RNAi_BEST]
feature       = RNAi_reagent:RNAi_primary RNAi_reagent:RNAi_secondary experimental_result_region:cDNA_for_RNAi
#feature       = RNAi_reagent:RNAi_primary
#feature       = rnai:RNAi_primary experimental_result_region:cDNA_for_RNAi
glyph         = segments
category      = Phenotype/Expression Tracks
bgcolor       = goldenrod
fgcolor       = black
height        = 4
label         = sub {
		my $f = shift;
		my $name   = $f->attributes('History_name');		
		my $string = $name ? $name : $f->name;
		return $string;
	}
description    = sub {
		my $f = shift;
		my $source = $f->attributes('Laboratory');
		my $string = $source ? "source lab: $source" : '';
		return $string;
	}
key           = RNAi experiments (primary targets)
citation      = This track represents RNAi probes that have been aligned to the genome
                using a combination of BLAST and BLAT programs and have sequence identity
                to the target location of at least 95% over a stretch of at least 100 nt.
                Probes that satisfy these criteria are almost certain to produce RNAi
                effect on overlapping genes and the corresponding locations are usually
                the primary genomic targets of an RNAi experiment. Note that it is possible
                for a probe to have multiple primary targets within the genome. Click on the
                RNAi element to get more information about the experiment.

[RNAi_OTHER]
feature       = RNAi_reagent:RNAi_secondary
#feature       = rnai:RNAi_secondary
category      = Phenotype/Expression Tracks
glyph         = segments
bgcolor       = red
fgcolor       = black
height        = 4
label         = sub {
		my $f = shift;
		my $name   = $f->attributes('History_name');		
		my $string = $name ? $name : $f->name;
		return $string;
	}
description    = sub {
		my $f = shift;
		my $source = $f->attributes('Laboratory');
		my $string = $source ? "source lab: $source" : '';
		return $string;
	}
key           = RNAi experiments (secondary targets)
citation      = This track represents RNAi probes that have been aligned to the genome 
                using BLAST program and have sequence identity to the target location 
                from 80 to 94.99% over a stretch of at least 200 nt. Probes that satisfy
                these criteria may or may not produce RNAi effect on overlapping genes
                and the corresponding locations represent possible secondary 
                (unintended) genomic targets of an RNAi experiment. Click on the RNAi 
                element to get more information about the experiment.

[SAGE]
feature       = SAGE_tag
glyph	      = transcript2
arrow_length  = 2
orient        = sub {
	          my $f = shift;
		  return $f->strand > 0 ? 'E' : 'W';
                }
strand_arrow  = 1
height        = 7
description   = sub {
		  my $f = shift;
		  return 0 if $f->source eq 'SAGE_tag';
		  my $name = $f->name;
		  $name =~ s/SAGE://;
	  	  return $name;
	  	}
bgcolor       = sub {
                  my $f = shift;
		  return 'lightgrey' if $f->source eq 'SAGE_tag';                
		  return $f->strand > 0 ? 'violet' : 'turquoise';
	       }
fgcolor       = sub {
                  my $f = shift;
                  return 'lightgrey' if $f->source eq 'SAGE_tag';
                  return $f->strand > 0 ? 'violet' : 'turquoise';
               }
label         = sub {
		  my $f = shift;
	          return '' if $f->source eq 'SAGE_tag';
		  my ($cnt)  = $f->attributes('count');
	          my ($gene) = $f->attributes('Gene', 'Transcript', 'Pseudogene');
		  return "$gene count:$cnt" if $gene && $cnt; 
  		}
category      = Phenotype/Expression Tracks
key           = SAGE tags
link          = sub {
                  my $f = shift;
	          my $name = $f->name;
	          return "/db/seq/sage?name=$name;class=SAGE_tag";
               }
citation      = This track indicates the location of Serial Analysis of Gene Expression (SAGE)
        patterns associated with a tag and its associated genes.  Tags shown in grey are
	either unambiguously mapped to a gene elsewhere or are ambigous due to multiple occurences
	in genomic or trascript sequences.  Colored tags are mapped unambiguously to a single
        gene or genomic location.  Violet and turquoise refer to the plus strand and minus 
        strands, respectively.  The number shown above tags is the total number of times
        this tag was observed in all SAGE experiments.

[SAGE:7001]
arrow_length  = 3

[SAGE:10001]
arrow_length  = 5
label         = sub {
                  my $f = shift;
                  return 0 if $f->source eq 'SAGE_tag';
                  my ($cnt) = $f->attributes('count');
		  return "$cnt "; #must not be '1'
                }

[TECRED]
feature  = nucleotide_match:TEC_RED
glyph    = box
bgcolor  = red
category = Phenotype/Expression Tracks
height   = 5
key      = TEC-RED tags
citation = Trans-spliced Exon Coupled RNA End Determination (TEC-RED) tags. TEC-RED uses a method similar to SAGE to identify expressed genes and characterize the 5' end of transcripts.

[EXPR]
feature       = experimental_result_region:Expr_profile
category      = Phenotype/Expression Tracks
bgcolor       = orange
fgcolor       = black
height        = 4
key           = Expression chip profiles
citation      = This track indicates the location of PCR products that have been placed on
	expression chips produced by the C. elegans Microarray Consortium [
	<a href="http://cmgm.stanford.edu/~kimlab/wmdirectorybig.html">http://cmgm.stanford.edu/~kimlab/wmdirectorybig.html</a>]. 
	The genes corresponding to these products have been clustered by their
	expression patterns.  Click on the profile to get more information about the expression
	profile of its corresponding gene.


[EXPR_PATTERN]
feature       = reagent:Expr_pattern
glyph         = sub {
		  my $name = shift->name;
		  my $png = -e "/usr/local/wormbase/website-shared-files/images/expression/assembled/$name.png";
	          return $png ? 'image' : 'span';
                }
glyph_delegate = span
image         = sub {
                  my $f = shift;
                  my $flip = $f->strand > 0 ? ';flip=1' : '';
                  my $name = $f->name;	
                  "/db/gene/expression?name=$name;draw=1;thumb=250$flip";
                }
link          = /get?name=$name;class=Expr_pattern
balloon hover = sub {
	          my $name   = shift->name;
		  my $length = shift->length;
		  my $png = -e "/usr/local/wormbase/website-shared-files/images/expression/assembled/$name.png";
                  my $cartoon = $length > 99999 && $png ? ';cartoon=1' : '';
		  "url:/gbrowse_popup?name=$name;type=EXPR_PATTERN$cartoon";
		}
category      = Phenotype/Expression Tracks
bgcolor       = silver
fgcolor       = black
height        = 8
key           = Expression patterns
fontcolor     = blue
label         = sub {
                  my $f = shift;
#                  my $ace = ElegansSubs::OpenDatabase();
#                  my $obj = $ace->fetch($f->class => $f->name);
#                  my ($gene) = ElegansSubs::Bestname($obj->Gene);
#                  my ($construct) = $obj->Transgene;
#                  $gene .= " ($construct)" if $construct;
#                  $gene;
                }
citation      = This track represents sequences that were used for in vivo expression pattern analysis,
                such as promoter sequences for GFP or LacZ constructs.  Colored areas in the worm
                image represent approximate regions where adult or late larval expression has been
                documented via Anatomy Ontology terms.  The strand of the sequence (promoter) region
                used is indicated by color in the same way as genes, where violet is the forward
                strand and turqoise is the reverse strand.  Clicking on the worm image will take you
                to a detailed view of the expression pattern.


[EXPR_PATTERN:40000]
image         = sub {"/db/gene/expression?draw=1;thumb=225;name=".shift->name}
[EXPR_PATTERN:60000]
image         = sub {"/db/gene/expression?draw=1;thumb=200;name=".shift->name}
[EXPR_PATTERN:80000]
image         = sub {"/db/gene/expression?draw=1;thumb=175;name=".shift->name}
[EXPR_PATTERN:100000]
glyph         = span

#############################################
#
#   VARIATIONS
#
#############################################
[CLASSICAL_ALLELES]
# examples
#I       Allele  insertion_site  3215748 3215748 .       +       .       Variation "WBVar00241057" ; Public_name "q271" ; Consequence "Frameshift" ; Interpolated_map_position "-4.47114"
#IV	Allele		deletion	13269114	13269407	.	-	  .		  Variation "WBVar00143133" ; Public_name "e345" ; Strain "DR97" ; Consequence "Coding_exon" ; Interpolated_map_position "8.51419"
#I       Allele  complex_substitution    8738887 8740543 .       +       .       Variation "WBVar00145099" ; Public_name "ef8" ; Strain "EV57" ; Consequence "Coding_exon" ; Interpolated_map_position "3.04571"
feature      = deletion:Allele
	       insertion_site:Allele
	       substitution:Allele
	       complex_substitution:Allele
category     = Variations
key          = Classical alleles
#include includes/variation_shared.conf
balloon hover = sub {
	           my $f = shift;
		   my $name = $f->attributes('Public_name') || $f->name;
		   my $m    = $f->method;
		   my $type = $m;
		   $type =~ s/_/ /g;

		   my %attributes = $f->attributes();
		   my $consequence = $attributes{Consequence};
		   $consequence =~ s/_/ /g;

		   my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
		   my @notes = ("<b>Allele: $name</b>");
		   push (@notes,"type: $type");
		   push (@notes,"status: $attributes{Status}")                  if $attributes{Status};
		   push (@notes,"position: $ref:$start..$stop");
		   push (@notes,"nucleotide change: $attributes{Substitution}") if $attributes{Substitution};
		   push (@notes,"amino acid change: $attributes{AAChange}")     if $attributes{AAChange};
           	   push (@notes,"consequence: " . lc($consequence))             if $consequence;
		   push (@notes,"strain: " . '<a href="http://www.wormbase.org/db/get?class=Strain;name=' . $attributes{Strain} . '">' . "$attributes{Strain}</a>") if $attributes{Strain};
#		   push (@notes,"source: " . $f->source);
		   return join('<br />',@notes);
	}
citation      = This track shows classical alleles comprised of insertions, deletions,
	        substitutions and complex changes. These alleles were typically generated
		during forward genetic screens.
		Red boxes represent deletions; yellow diamonds represent substitutions; 
		blue boxes represent complex substitutions; and white triangles represent
		insertions.
#		TODO: See the BLAH BLAH BLAH track for molecular details.


#I       CGH_allele      deletion        3995    4371    .       +       .       Variation "WBVar00601176" ; Public_name "gk3247" ; Strain "VC3124" ; Consequence "Coding_exon"
#I       KO_consortium   complex_substitution    345532  346253  .       +       .       Variation "WBVar00093611" ; Public_name "ok2465" ; Strain "VC1855" ; Consequence "Frameshift"
#I       KO_consortium   deletion        29644   30178   .       +       .       Variation "WBVar00094233" ; Public_name "ok3157" ; Strain "RB2325" ; Consequence "Coding_exon"
#I       KO_consortium   point_mutation  30149   30149   .       +       .       Variation "WBVar00278095" ; Public_name "gk1294" ; Strain "VC1923" ; Substitution "C/T" ; Consequence "Silent"
#I       Million_mutation        point_mutation  4279    4279    .       +       .       Variation "WBVar00604270" ; Public_name "gk859761" ; Strain "VC40875" ; Substitution "A/G" ; Consequence "Missense" ; AAChange "I to T"
#I       Variation_project       deletion        17889   17889   .       +       .       Variation "WBVar01402366" ; Public_name "WBVar01402366" ; Strain "CB4856" ; Polymorphism
#I       Variation_project       insertion_site  91288   91289   .       +       .       Variation "WBVar01359488" ; Public_name "WBVar01359488" ; Strain "CB4856" ; Polymorphism
#III	Variation_project		point_mutation	10702759	10702759	  .		  + .		Variation "WBVar00303351" ; Public_name "otn6530" ; Other_name "OH7116_36658" ; Strain "OH7116" ; Substitution "A/G" ; Consequence "Intron"
#I       NBP_knockout    deletion        14758   15005   .       +       .       Variation "WBVar00252636" ; Public_name "tm4085" ; Consequence "Coding_exon"
# No mobile_element_insertion entries
# X       NemaGENETAG_consortium  transposable_element_insertion_site     17671727        17671728        .       +       .       Variation "WBVar00266444" ; Public_name "ttTi55407" ; Strain "IE55407" ; Consequence "Intron"
[HIGH_THROUGHPUT_ALLELES]
feature      = deletion:CGH_allele
	       complex_substitution:KO_consortium
	       deletion:KO_consortium
	       point_mutation:KO_consortium
	       deletion:Variation_project
	       insertion_site:Variation_project
	       point_mutation:Variation_project
	       complex_substitution:NBP_knockout
	       deletion:NBP_knockout
	       transposable_element_insertion_site:NemaGENETAG_consortium
category     = Variations
key          = High-throughput alleles
label        = sub {
	     my $f = shift;
	     my $name = $f->attributes('Public_name') || $f->name;
	     return $name;
	      }	      
description  = sub {
		my $f = shift;
		my $m = $f->method;
		$m =~ s/_/ /g;
		return $m;
 	}
glyph        = sub {
		my $f = shift;
		my $m = $f->method;
		return 'triangle' if $m eq 'insertion_site';
		return 'triangle' if $m eq 'mobile_element_insertion';
		return 'box'      if $m eq 'complex_substitution';
		return 'box'      if $m eq 'deletion';
		return 'diamond'  if $m eq 'substitution';
		return 'diamond'  if $m eq 'point_mutation';
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;
		my $m = $f->method;
		return 'red'    if $m eq 'deletion';
		return 'yellow' if $m eq 'point_mutation';
		return 'yellow' if $m eq 'substitution';
		return 'blue'   if $m eq 'complex_substitution';		
		return 'white'; # insertion_site, mobile_element_insertion
	}
fgcolor      = black
font2color   = blue
height       = 8
balloon hover = sub {
	           my $f = shift;
		   my $name = $f->attributes('Public_name') || $f->name;
		   my $m    = $f->method;
		   my $type = $m;
		   $type =~ s/_/ /g;
		
		   # We might want to be a little fancier with sources, like linking to the resource.
                   my $source = $f->source; 
		   my $sanitized_source = $source;
		   $sanitized_source =~ s/_/ /g;

		   my %attributes = $f->attributes();
		   my $consequence = $attributes{Consequence};
		   $consequence =~ s/_/ /g;

		   my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
		   my @notes = ("<b>High-throughput allele: $name</b>");
		   push (@notes,"type: $type");
		   push (@notes,"status: $attributes{Status}")                  if $attributes{Status};
		   push (@notes,"position: $ref:$start..$stop");
		   push (@notes,"nucleotide change: $attributes{Substitution}") if $attributes{Substitution};
		   push (@notes,"amino acid change: $attributes{AAChange}")     if $attributes{AAChange};
           	   push (@notes,"consequence: " . lc($consequence))             if $consequence;
		   push (@notes,"strain: " . '<a href="http://www.wormbase.org/db/get?class=Strain;name=' . $attributes{Strain} . '">' . "$attributes{Strain}</a>") if $attributes{Strain};
		   push (@notes,"source: $sanitized_source");  # maybe a link to resource, too?
		   return join('<br />',@notes);
	}
citation      = These are alleles generated through high-throughput, genome-wide projects. Million Mutation Project alleles are placed in a separate track.


[POLYMORPHISMS]
feature =
       deletion:CGH_allele_Polymorphism
       deletion:Variation_project_Polymorphism
 insertion_site:Variation_project_Polymorphism
            SNP:Variation_project_Polymorphism
   substitution:Variation_project_Polymorphism
category     = Variations
key          = Polymorphisms
label        = sub {
	     my $f = shift;
	     my $name = $f->attributes('Public_name') || $f->name;
	     # Some variations actually HAVE names.
	     if ($name =~ /^WBVar/) {
	         $name = $f->attributes('Other_name') || $name;
             }
	     return $name;
	      }	      
description  = sub {
		my $f = shift;
		my %attributes = $f->attributes();
		my $label      = defined $attributes{RFLP} ? 'RFLP' : 'polymorphism';

		# Fudge factor.  Let's call the SNP verified if it has an 
                # allele-like designation or is an exilixis uCE allele
		my $description = $attributes{Status} eq 'Confirmed' ? 'confirmed' : 'predicted';
		$description = 'verified' if ($f->name =~ /^uCE/); 
		return "$label ($description)";
 	}
glyph        = sub {
		my $f = shift;
		my $m = $f->method;
		return 'triangle' if $m eq 'insertion_site';
		return 'box'      if $m eq 'deletion';
		return 'diamond'  if $m eq 'substitution';
		return 'diamond'  if $m eq 'SNP';
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;	
		my %attributes = $f->attributes();
		if ($attributes{Strain} eq 'CB4858') {
		    return 'blue';
		} elsif ($attributes{Strain} eq 'CB4856') {
		    return 'yellow';
                } else {
		    return 'white';
                } 

#		# Confirmed, RFLP SNPs
#		if (defined $attributes{RFLP} && $attributes{Status} eq 'Confirmed') {
#			return 'green';
#		# Confirmed, sequence detectable SNPs
#		} elsif (defined $attributes{RFLP} && $attributes{Status} eq 'Confirmed') {
#			return 'yellow';  
#	        } else {
#   	        # Predicted SNPs
#			return 'red';
#		}
	}
fgcolor      = black
font2color   = blue
height       = sub {
	        my $f = shift;
		my %attributes = $f->attributes();

                # Confirmed, RFLP SNPs
                if (defined $attributes{RFLP} && $attributes{Status} eq 'Confirmed') {
                        return 14;
                } else {
                        return 8;
                }
        }	
balloon hover = sub {
	           my $f = shift;
		   my %attributes = $f->attributes();
		   my $name       = $attributes{Public_name} || $f->name;	     
                   # Some variations actually HAVE names.	    
	           if ($name =~ /^WBVar/) {
	                $name = $attributes{Other_name} || $name;
                   }
		   my $m    = $f->method;
		   my $type = $m;
		   $type =~ s/_/ /g;

                   my $source = $f->source; 
		   my $sanitized_source = $source;
		   $sanitized_source =~ s/_Polymorphisms//g;
		   $sanitized_source =~ s/_/ /g;

		   my $consequence = $attributes{Consequence};
		   $consequence =~ s/_/ /g;

		   my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
		   my @notes = ("<b>Polymorphism: $name</b>");
		   push (@notes,"type: $type");
		   push (@notes,"status: $attributes{Status}")                  if $attributes{Status};
		   push (@notes,"position: $ref:$start..$stop");
		   push (@notes,"nucleotide change: $attributes{Substitution}") if $attributes{Substitution};
		   push (@notes,"amino acid change: $attributes{AAChange}")     if $attributes{AAChange};
           	   push (@notes,"consequence: " . lc($consequence))             if $consequence;
		   push (@notes,"strain: " . '<a href="http://www.wormbase.org/db/get?class=Strain;name=' . $attributes{Strain} . '">' . "$attributes{Strain}</a>") if $attributes{Strain};
		   push (@notes,"source: $sanitized_source");
		   return join('<br />',@notes);
	}
citation     = This track shows single nucleotide polymorphisms (SNPs).
               In this track, the molecular nature of the polymorphism is indicated by
               its glyph: Boxes are deletions; triangles are insertions; point mutations
                and substitutions are diamonds. Color reflects the source strain: blue
		polymorphisms were identified in CB4858 (Pasadena), yellow in CB4856
		(Hawaii), all other backgrounds are white.
#               Confirmed polymorphisms that generate an RFLP (a Snip-SNP) are shown in green. Confirmed
#               sequence-detectable polymorphisms are shown in yellow. Predicted polymorphisms are shown in red.


#I       PCoF_Allele     substitution    152861  152861  .       +       .       Variation "WBVar00143469" ; Public_name "e767" ; Strain "CB767" ; Substitution "G/A" ; Consequence "Missense" ; AAChange "G to D" ; Interpolated_map_position "-19.1473"
#I       PCoF_Allele     deletion        332481  333475  .       +       .       Variation "WBVar00317242" ; Public_name "m98" ; Consequence "Coding_exon" ; Interpolated_map_position "-19.074"
#I       PCoF_Allele     complex_substitution    3211118 3212158 .       +       .       Variation "WBVar00296492" ; Public_name "q785" ; Strain "JK3743" ; Consequence "Coding_exon" ; Interpolated_map_position "-4.47301"
#I       PCoF_Allele     insertion_site  12568334        12568335        .       -       .       Variation "WBVar00088182" ; Public_name "ju476" ; Strain "CZ5730" ; Consequence "Frameshift" ; Interpolated_map_position "13.5979"
#  (didn't find any transposable_element_insertion_site or NemaGENE
#I       PCoF_CGH_allele deletion        3995    4371    .       +       .       Variation "WBVar00601176" ; Public_name "gk3247" ; Strain "VC3124" ; Consequence "Coding_exon"
#I       PCoF_KO_consortium      complex_substitution    141767  142832  .       +       .       Variation "WBVar00092977" ; Public_name "ok1775" ; Strain "RB1505" ; Consequence "Coding_exon"
#I       PCoF_KO_consortium      deletion        146756  147198  .       +       .       Variation "WBVar00601110" ; Public_name "gk3069" ; Strain "VC3226" ; Consequence "Coding_exon"
#I       PCoF_KO_consortium      point_mutation  202358  202358  .       +       .       Variation "WBVar00276952" ; Public_name "gk2281" ; Strain "VC2451" ; Substitution "T/A" ; Consequence "Missense" ; AAChange "Y to N"
#I       PCoF_Million_mutation   point_mutation  4279    4279    .       +       .       Variation "WBVar00604270" ; Public_name "gk859761" ; Strain "VC40875" ; Substitution "A/G" ; Consequence "Missense" ; AAChange "I to T"
#I       PCoF_Variation_project  point_mutation  719041  719041  .       +       .       Variation "WBVar00306076" ; Public_name "otn9255" ; Other_name "OH8001_899" ; Strain "OH8001" ; Substitution "T/C" ; Consequence "Missense" ; AAChange "K to E"
#V       PCoF_Variation_project  deletion        5542484 5543059 .       +       .       Variation "WBVar00278467" ; Public_name "ot626" ; Strain "OH9482" ; Consequence "Coding_exon"
#I       PCoF_NBP_knockout       deletion        14758   15005   .       +       .       Variation "WBVar00252636" ; Public_name "tm4085" ; Consequence "Coding_exon"
#I       PCoF_NBP_knockout       complex_substitution    113024  113454  .       +       .       Variation "WBVar00250499" ; Public_name "tm1507" ; Consequence "Coding_exon"
[CHANGE_OF_FUNCTION_ALLELES]
# TODO There are no *PCoF* entries in the data anymore.
feature =         complex_substitution:PCoF_Allele
                              deletion:PCoF_Allele
                        insertion_site:PCoF_Allele
                          substitution:PCoF_Allele
   transposable_element_insertion_site:PCoF_Allele
                              deletion:PCoF_CGH_allele
                  complex_substitution:PCoF_KO_consortium
                              deletion:PCoF_KO_consortium
                        point_mutation:PCoF_KO_consortium
                        point_mutation:PCoF_Million_mutation
                              deletion:PCoF_Variation_project
                        point_mutation:PCoF_Variation_project
                  complex_substitution:PCoF_NBP_knockout
                              deletion:PCoF_NBP_knockout
              transposable_element_insertion_site:PCoF_NemaGENETAG_consortium
category     = Variations
key          = Change-of-function alleles
label        = sub {
	     my $f = shift;
	     my $name = $f->attributes('Public_name') || $f->name;
	     return $name;
	      }	      
description  = sub {
		my $f = shift;
		my $m = $f->method;
		$m =~ s/_/ /g;
		return $m;
 	}
glyph        = sub {
		my $f = shift;
		my $m = $f->method;
		return 'triangle' if $m =~ /insertion/i;  # insertion_site mobile_element_insertion tranposable_element_insertion
		return 'box'      if $m eq 'complex_substitution';
		return 'box'      if $m eq 'deletion';
		return 'diamond'  if $m eq 'substitution';
		return 'diamond'  if $m eq 'point_mutation';
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;
		my $m = $f->method;
	        my %attributes = $f->attributes();
		return 'green'  if $attributes{Consequence} eq 'Missense';
		return 'yellow' if $attributes{Consequence} eq 'Coding_exon';
		return 'red'    if $attributes{Consequence} eq 'Nonsense';
		return 'blue'   if $attributes{Consequence} eq 'Frameshift';
		return 'white'; # insertion_site, mobile_element_insertion	
#		return 'red'    if $m eq 'deletion';
#		return 'yellow' if $m eq 'point_mutation';
#		return 'yellow' if $m eq 'substitution';
#		return 'blue'   if $m eq 'complex_substitution';		
#		return 'white'; # insertion_site, mobile_element_insertion
	}
fgcolor      = black
font2color   = blue
height       = 8
balloon hover = sub {
	           my $f = shift;
		   my $name = $f->attributes('Public_name') || $f->name;
		   my $m    = $f->method;
		   my $type = $m;
		   $type =~ s/_/ /g;
		
		   # We might want to be a little fancier with sources, like linking to the resource.   		
                   my $source = $f->source; 
		   my %attributes = $f->attributes();
		   my $consequence = $attributes{Consequence};
		   $consequence =~ s/_/ /g;

		   my $sanitized_source = $source;
		   $sanitized_source =~ s/PCoF_//g;
		   $sanitized_source =~ s/_/ /g;

		   my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
		   my @notes = ("<b>$sanitized_source: $name</b>");
		   push (@notes,"type: $type");
		   push (@notes,"status: $attributes{Status}")                  if $attributes{Status};
		   push (@notes,"position: $ref:$start..$stop");
		   push (@notes,"nucleotide change: $attributes{Substitution}") if $attributes{Substitution};
		   push (@notes,"amino acid change: $attributes{AAChange}")     if $attributes{AAChange};
           	   push (@notes,"consequence: " . lc($consequence))             if $consequence;
		   push (@notes,"strain: " . '<a href="http://www.wormbase.org/db/get?class=Strain;name=' . $attributes{Strain} . '">' . "$attributes{Strain}</a>") if $attributes{Strain};
		   push (@notes,"source: $sanitized_source");
		   return join('<br />',@notes);
	}
citation      = This track shows alleles that generate a putative change-of-function.
	        In this track, the type of mutation is indicated by its glyph: Boxes are
 		deletions. Triangles are insertions. Point mutations and substitutions 
		are diamonds. Color shows the potential effect on coding regions.
                Green indicates a possible missense; red a possible
 		nonsense; blue a frameshift; yellow a disruption of a coding exon(s); and
		white for everything else. Mouse over the feature for details.


# Polymorphism track
#I       PCoF_CGH_allele_Polymorphism    deletion        11820567        11827632        .       +       .       Variation "WBVar00091033" ; Public_name "WBVar00091033" ; Other_name "niDf12(I)" ; Strain "CB4856" ; Polymorphism ; Consequence "Coding_exon"
#I       PCoF_Variation_project_Polymorphism     SNP     6313    6313    .       +       .       Variation "WBVar00003776" ; Public_name "WBVar00003776" ; Other_name "pas12352" ; Strain "CB4858" ; Status "Predicted" ; Polymorphism ; Substitution "G/T" ; Consequence "Nonsense" ; AAChange "Y to ochre stop (63)"
#I       PCoF_Variation_project_Polymorphism     deletion        101469  101469  .       +       .       Variation "WBVar01402577" ; Public_name "WBVar01402577" ; Strain "CB4856" ; Polymorphism ; Consequence "Coding_exon"
#I       PCoF_Variation_project_Polymorphism     insertion_site  106360  106361  .       +       .       Variation "WBVar01365044" ; Public_name "WBVar01365044" ; Strain "CB4856" ; Polymorphism ; Consequence "Frameshift"
#I       PCoF_Variation_project_Polymorphism     SNP     6313    6313    .       +       .       Variation "WBVar00003776" ; Public_name "WBVar00003776" ; Other_name "pas12352" ; Strain "CB4858" ; Status "Predicted" ; Polymorphism ; Substitution "G/T" ; Consequence "Nonsense" ; AAChange "Y to ochre stop (63)"
#III     PCoF_Variation_project_Polymorphism     substitution    8422218 8422230 .       +       .       Variation "WBVar00095026" ; Public_name "WBVar00095026" ; Other_name "oxP1" ; Strain "CB4856" ; Status "Confirmed" ; Polymorphism ; Substitution "GCATAGTCAACGC/ACATAGTCAACGA" ; Consequence "Coding_exon"
#X       PCoF_Variation_project_Polymorphism     complex_substitution    14229734        14234639        .       +       .       Variation "WBVar00601571" ; Public_name "WBVar00601571" ; Other_name "LSJ2_290" ; Strain "LSJ2" ; Polymorphism ; Consequence "Frameshift"
[CHANGE_OF_FUNCTION_POLYMORPHISMS]
# TODO There are no *PCoF* entries in the data anymore.
feature =     deletion:PCoF_CGH_allele_Polymorphism
              deletion:PCoF_Natural_variation_project_Polymorphism
        insertion_site:PCoF_Natural_variation_project_Polymorphism
                   SNP:PCoF_Natural_variation_project_Polymorphism
          substitution:PCoF_Natural_variation_project_Polymorphism
  complex_substitution:PCoF_Natural_variation_project_Polymorphism
category     = Variations
key          = Change-of-function polymorphisms
label        = sub {
	     my $f = shift;
	     my $name = $f->attributes('Public_name') || $f->name;
	     return $name;
	      }	      
description  = sub {
		my $f = shift;
		my $m = $f->method;
		$m =~ s/_/ /g;
		return $m;
 	}
glyph        = sub {
		my $f = shift;
		my $m = $f->method;
		return 'triangle' if $m =~ /insertion/i;  # insertion_site mobile_element_insertion tranposable_element_insertion
		return 'box'      if $m eq 'complex_substitution';
		return 'box'      if $m eq 'deletion';
		return 'diamond'  if $m eq 'substitution';
		return 'diamond'  if $m eq 'point_mutation';
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;
		my $m = $f->method;
	        my %attributes = $f->attributes();
		return 'green'  if $attributes{Consequence} eq 'Missense';
		return 'yellow' if $attributes{Consequence} eq 'Coding_exon';
		return 'red'    if $attributes{Consequence} eq 'Nonsense';
		return 'blue'   if $attributes{Consequence} eq 'Frameshift';
		return 'white'; # insertion_site, mobile_element_insertion	
#		return 'red'    if $m eq 'deletion';
#		return 'yellow' if $m eq 'point_mutation';
#		return 'yellow' if $m eq 'substitution';
#		return 'blue'   if $m eq 'complex_substitution';		
#		return 'white'; # insertion_site, mobile_element_insertion
	}
fgcolor      = black
font2color   = blue
height       = 8
balloon hover = sub {
	           my $f = shift;
		   my $name = $f->attributes('Public_name') || $f->name;
		   my $m    = $f->method;
		   my $type = $m;
		   $type =~ s/_/ /g;
		
		   # We might want to be a little fancier with sources, like linking to the resource.   		
                   my $source = $f->source; 
		   my $sanitized_source = $source;
		   $sanitized_source =~ s/PCoF_//g;
		   $sanitized_source =~ s/_POLYMORPHISM//g;
		   $sanitized_source =~ s/_/ /g;

		   my %attributes = $f->attributes();
		   my $consequence = $attributes{Consequence};
		   $consequence =~ s/_/ /g;

		   my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
		   my @notes = ("<b>$sanitized_source: $name</b>");
		   push (@notes,"type: $type");
		   push (@notes,"status: $attributes{Status}")                  if $attributes{Status};
		   push (@notes,"position: $ref:$start..$stop");
		   push (@notes,"nucleotide change: $attributes{Substitution}") if $attributes{Substitution};
		   push (@notes,"amino acid change: $attributes{AAChange}")     if $attributes{AAChange};
           	   push (@notes,"consequence: " . lc($consequence))             if $consequence;
		   push (@notes,"strain: " . '<a href="http://www.wormbase.org/db/get?class=Strain;name=' . $attributes{Strain} . '">' . "$attributes{Strain}</a>") if $attributes{Strain};
		   push (@notes,"source: $sanitized_source");  # and possibly a link?
		   return join('<br />',@notes);
	}
citation     = This track shows single nucleotide polymorphisms (SNPs) that may generate
 	       a change of function.
               In this track, the molecular nature of the polymorphism is indicated by
               its glyph: Boxes are deletions; triangles are insertions; point mutations
                and substitutions are diamonds. Color shows the potential effect on coding regions.
                Green indicates a possible missense; red a possible
 		nonsense; blue a frameshift; yellow a disruption of a coding exon(s); and
		white for everything else. Mouse over the feature for details.


[TRANSPOSON_INSERTION_SITES]
feature      = transposable_element_insertion_site:Mos_insertion_allele
               transposable_element_insertion_site:Allele
	       transposable_element_insertion_site:NemaGENETAG_consortium
category     = Variations
key          = Transposon insert sites
label        = sub {
	     my $f = shift;
	     my $name = $f->attributes('Public_name') || $f->name;
	     return $name;
	      }	
description  = sub {
		my $f = shift;
		my $method = $f->method;
		return 'Mos insertion' if $f->source eq 'Mos_insertion_allele';
		return 'NemaGENETAG insertion' if $f->source eq 'NemaGENETAG_consortium';
		return 'transposon insertion';
 	}
glyph        = diamond
bgcolor      = sub {
		my $f = shift;
		return 'yellow' if $f->source eq 'Mos_insertion_allele';
		return 'red' if $f->source eq 'NemaGENETAG_consortium';
		return 'blue';
	}
fgcolor      = black
font2color   = blue
height       = 8
balloon hover = sub {
	           my $f = shift;
		   my $name = $f->attributes('Public_name') || $f->name;
		   my $m    = $f->method;
		   my $type = $m;
		   $type =~ s/_/ /g;
		
		   # We might want to be a little fancier with sources, like linking to the resource.   		
                   my $source = $f->source; 
		   my %attributes = $f->attributes();
		   my $consequence = $attributes{Consequence};
		   $consequence =~ s/_/ /g;

		   my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
		   my @notes = ("<b>$name</b>");
		   push (@notes,"type: $type");
		   push (@notes,"status: $attributes{Status}")                  if $attributes{Status};
		   push (@notes,"position: $ref:$start..$stop");
		   push (@notes,"nucleotide change: $attributes{Substitution}") if $attributes{Substitution};
		   push (@notes,"amino acid change: $attributes{AAChange}")     if $attributes{AAChange};
           	   push (@notes,"consequence: " . lc($consequence))             if $consequence;
		   push (@notes,"strain: " . '<a href="http://www.wormbase.org/db/get?class=Strain;name=' . $attributes{Strain} . '">' . "$attributes{Strain}</a>") if $attributes{Strain};
		   push (@notes,"source: $source");
		   return join('<br />',@notes);
	}
citation     = This track shows transposon insertion sites engineered by
               Laurent Segalat and others 
               [<a href="/get?name=%5Bwm99ab757%5D;class=Paper">Alvarez et al.</a>, Towards a genome-wide collection of transposon insertions, International C. elegans Meeting 1999 #757].
	      Yellow triangles are Mos-derived transposon insertions; red trangles are
	      NemaGENETAG consortium insertion sites;
              blue triangles are Tc* derived transposon insertions.


#I       Million_mutation        point_mutation  4279    4279    .       +       .       Variation "WBVar00604270" ; Public_name "gk859761" ; Strain "VC40875" ; Substitution "A/G" ; Consequence "Missense" ; AAChange "I to T"
[MILLION_MUTATION_PROJECT]
feature      = point_mutation:Million_mutation # TODO There is no Million_mutation in the data; only KO_consortium and Variation_project
category     = Variations
key          = Million Mutation Project
label        = sub {
	     my $f = shift;
	     return $f->attributes('Public_name') || $f->name;
	      }	      
description  = point mutation
glyph        = sub {
		my $f = shift;
		# Some SNPs come out length 3. Dunno why.
		return 'diamond'  if $f->length <= 3;
		return 'generic';
	}
bgcolor      = sub {
		my $f = shift;
		my $m = $f->method;
	        my %attributes = $f->attributes();
		return 'green'  if $attributes{Consequence} eq 'Missense';
		return 'yellow' if $attributes{Consequence} eq 'Coding_exon';
		return 'red'    if $attributes{Consequence} eq 'Nonsense';
		return 'blue'   if $attributes{Consequence} eq 'Frameshift';
		return 'white'; # insertion_site, mobile_element_insertion	
#		return 'red'    if $m eq 'deletion';
#		return 'yellow' if $m eq 'point_mutation';
#		return 'yellow' if $m eq 'substitution';
#		return 'blue'   if $m eq 'complex_substitution';		
#		return 'white'; # insertion_site, mobile_element_insertion
	}
fgcolor      = black
font2color   = blue
height       = 8
link         = sub {
                  my $f = shift;
                  my $name = $f->name;
                  return "/get?name=$name;class=Variation";
      }
balloon hover = sub {
	           my $f = shift;
		   my $name = $f->attributes('Public_name') || $f->name;
		   my $m    = $f->method;
		   my $type = $m;
		   $type =~ s/_/ /g;
		
		   # We might want to be a little fancier with sources, like linking to the resource.   		
                   my $source = $f->source; 
		   my %attributes = $f->attributes();
		   my $consequence = $attributes{Consequence};
		   $consequence =~ s/_/ /g;

		   my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
		   my @notes = ("<b>Million Mutation SNP: $name</b>");
		   push (@notes,"type: $type");
		   push (@notes,"status: $attributes{Status}")                  if $attributes{Status};
		   push (@notes,"position: $ref:$start..$stop");
		   push (@notes,"nucleotide change: $attributes{Substitution}") if $attributes{Substitution};
		   push (@notes,"amino acid change: $attributes{AAChange}")     if $attributes{AAChange};
           	   push (@notes,"consequence: " . lc($consequence))             if $consequence;
		   push (@notes,"strain: " . '<a href="http://www.wormbase.org/db/get?class=Strain;name=' . $attributes{Strain} . '">' . "$attributes{Strain}</a>") if $attributes{Strain};
		   push (@notes,"source: $source");
		   return join('<br />',@notes);
	}
citation     = This track shows SNPs from the The Million Mutation Project (Waterston/Moerman).
               The color of the SNP represents its potental effect on a gene. Green indicates a
	       possible missense; red a possible nonsense; blue a frameshift; yellow a 
	       disruption of a coding exon(s); and white for everything else.


#################################################################################################
#
#    END VARIATION TRACKS
#
#################################################################################################


[PCR]
feature       = PCR_product
bgcolor       = violet
glyph         = primers
category      = Reagents
fgcolor       = black
connect       = 1
connect_color = cyan
key           = PCR Assays
citation      = This track indicates the location of primer pairs that have been created by a number
	of groups.  Click on the element to obtain the left and right oligo sequences, information
	about the amplification information, and ordering information (if available). 

[PolyA]
feature      = polyA_signal_sequence polyA_site
glyph        = sub {
		my $f = shift;
		return 'diamond' if $f->method =~ /signal/;
		return 'dot' if $f->strand eq '0';
		return 'triangle';
	}
category     = Genes
point        = 1
orient       = sub {
		my $f = shift;
		return if $f->method =~ /signal/;
		return 'W' if $f->strand eq '-1';
		return 'E';
	}
bgcolor      = purple
description  = sub { my $s = shift->source; $s=~tr/_/ /; $s; }
key          = polyA sites and signal sequences
citation     = High-confidence polyadenylation signal sequences and sites calculated by an algorithm trained with verified sites from full-length mRNAs.


################################################
# Binding Sites
################################################
[PREDICTED_BINDING_SITES]
feature      = binding_site:PicTar
               binding_site:miRanda
               binding_site:cisRed
glyph        = sub {
		my $f = shift;
		return 'box';
	}
category     = Misc:Binding Sites & Regions
bgcolor      = sub {
	my $f = shift;
	my $method = $f->method;
	return 'blue' if $f->source eq 'PicTar';
	return 'red'  if $f->source eq 'miRanda';
	return 'green';
	}
key        = Binding sites (predicted)
#description  = sub {
#	my $f  = shift;
#	my $desc = join('; ',$f->notes);
#	return $desc;
#	}
link      = sub {
		my $f = shift;
		my $source = $f->source;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     =~ /Predicted binding site for (.*)/;
		my $gene = $1;
		return "/get?name=$gene;class=Gene" if $gene =~ /\w{3,4}?-\d+?/;
		return "http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $source eq 'PicTar';
		return "http://microrna.sanger.ac.uk/targets/v3/" if $source eq 'miRanda'; 
		return "/get?name=$name;class=Feature";
		return;
	}
label     = sub {
		my $f = shift;
		my $source =  $f->source;
		my $name = $f->name;
		return "$name (DNA binding site)" if $source eq 'misc_feature';
		# Name is actually stored in notes for most features as a single note
		my $notes = $f->notes;
		$notes = $name if($notes eq '');
		return "$source: $notes";
	}    
title     = sub {
		my $f = shift;
		my $source =  $f->source;
		my $name = $f->name;
		return "External data: See http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode" if $source eq 'PicTar';
		return "External data: See http://microrna.sanger.ac.uk/targets/v3/" if $source eq 'miRanda';				
		return $name;
	}    
citation     = This track shows curated and predicted binding sites for
               microRNAs. Binding sites (indicated in green) are extracted from the
               cisRed database of computationally derived potential bind
               targets. miRanda predictions -- indicated in red -- are the predicted
               target sequences for microRNA genes, provided by Anton Enright's group
               using the miRanda program. PicTar predictions -- indicated in blue --
               are the predicted target sequences for microRNA genes from Lall et al;
               A genome-wide map of conserved microRNA targets in C. elegans. Curr
               Biol. 2006 Mar 7;16(5):460-71.

[CURATED_BINDING_SITES]
# EG WBsf047547 III:7816962..7816982
feature      = binding_site:binding_site     
glyph        = box
category     = Misc:Binding Sites & Regions
bgcolor      = green
key          = Binding sites
link         = sub {
		my $f = shift;		
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     =~ /Predicted binding site for (.*)/;
		my $gene = $1;
		return "/get?name=$gene;class=Gene" if $gene =~ /\w{3,4}?-\d+?/;
		return "/get?name=$name;class=Feature";
		return;
	}
label     = sub {
		my $f = shift;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     = $name if ($notes eq '');
		return "$notes";
	}    
citation     = Sites where there is experimental evidence of a non-TF, non-Histone
               molecule binding.


[BINDING_REGIONS]
# EG: WBsf216878; III:7854473..7854493
feature      = binding_site:binding_site_region                    
glyph        = box
category     = Misc:Binding Sites & Regions
bgcolor      = green
key        = Binding regions
link      = sub {
		my $f = shift;
		my $method = $f->method;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     =~ /Predicted binding site for (.*)/;
		my $gene = $1;
		return "/get?name=$gene;class=Gene" if $gene =~ /\w{3,4}?-\d+?/;
		return "/get?name=$name;class=Feature";
	}
label     = sub {
		my $f = shift;
		my $name = $f->name;
		# Name is actually stored in notes for most features as a single note
		my $notes = $f->notes;
		$notes = $name if($notes eq '');
		return "$notes";
	}    
citation     = Regions within which there may be one or more binding sites of a
               non-TF, non-Histone molecule.


[HISTONE_BINDING_SITE_REGIONS]
# EG WBsf047038; III:7857561..7857581
feature      = histone_binding_site:histone_binding_site_region
glyph        = box
category     = Misc:Binding Sites & Regions
bgcolor      = green
key          = Histone binding sites
link         = sub {
		my $f = shift;		
		my $name   = $f->name;
		return "/get?name=$name;class=Feature";
	}
label     = sub {
		my $f = shift;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     = $name if ($notes eq '');
		return "$notes";
	}    
citation     = Regions within which there is experimental evidence for one or more
               binding sites of a histone.



[PROMOTER_REGIONS]
# EG WBsf034281; I:5165237..5165257
feature      = misc_feature:promoter
glyph        = box
category     = Misc:Binding Sites & Regions
bgcolor      = green
key          = Promoter regions
link         = sub {
		my $f = shift;		
		my $name   = $f->name;
		return "/get?name=$name;class=Feature";
	}
label     = sub {
		my $f = shift;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     = $name if ($notes eq '');
		return "$notes";
	}    
citation     = Regions within which there is experimental evidence for a promoter.


[REGULATORY_REGIONS]
# EG WBsf047577; V:8387251..8387261
feature      = regulatory_region:regulatory_region
glyph        = box
category      = Misc:Binding Sites & Regions
bgcolor      = green
key          = Regulatory regions
link         = sub {
		my $f = shift;		
		my $name   = $f->name;
		return "/get?name=$name;class=Feature";
	}
label     = sub {
		my $f = shift;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     = $name if ($notes eq '');
		return "$notes";
	}    
citation     = Assorted or unspecified regulatory elements with experimental evidence.


[DNAseI_HYPERSENSITIVE_SITE]
feature      = DNAseI_hypersensitive_site:DNAseI_hypersensitive_site
glyph        = box
category      = Misc:Sequence Features
bgcolor      = green
key          = DNAseI hypersensitive site
link         = sub {
		my $f = shift;		
		my $name   = $f->name;
		return "/get?name=$name;class=Feature";
	}
label     = sub {
		my $f = shift;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     = $name if ($notes eq '');
		return "$notes";
	}    
citation     = DNAse I hypersensitive sites from the 2009 paper by Shi et al.


[MICRO_ORF]
feature      = feature:micro_ORF # TODO five_prime_open_reading_frame or aggregate?
glyph        = box
category      = Misc:Sequence Features
bgcolor      = green
key          = Micro ORF
link         = sub {
		my $f = shift;		
		my $name   = $f->name;
		return "/get?name=$name;class=Feature";
	}
label     = sub {
		my $f = shift;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     = $name if ($notes eq '');
		return "$notes";
	}    
citation     = The location of micro ORFs with experimental evidence.


[POLYSOMES]
feature      = Polysome:Polysome # TODO No such pair in the data set.
glyph        = box
category      = Misc:Sequence Features
bgcolor      = green
key          = Polysomes
link         = sub {
		my $f = shift;		
		my $name   = $f->name;
		return "/get?name=$name;class=Feature";
	}
label     = sub {
		my $f = shift;
		my $name   = $f->name;
		my $notes  = $f->notes;
		$notes     = $name if ($notes eq '');
		return "$notes";
	}    
citation     = This data is from the The Lamm et al. (2011) PMID: 21177965 paper
               finding regions bound by the polysome fraction of RNAs being actively
               translated.


################################################
# RNASeq
################################################
#include includes/rna_seq.conf



[OSTP]
feature       = PCR_product:Orfeome
glyph         = sub {
		my $f = shift;
		return 'primers' if $f->method eq 'PCR_product';
		return 'box';
	}	
category      = Reagents
height        = 4
fgcolor       = black
connect       = 1
#connect_color = \&ostp_color
#font2color    = \&ostp_color
#fgcolor       = \&ostp_color
#description   = \&ostp_amplifies
key           = ORFeome Project Primers
citation      = This track contains Orfeome Project primer pairs and RACE tags.  These primers were used to amplify
	C. elegans cDNAs.  A positive amplification, shown in green, is evidence that the region
	between the two primers is transcribed.  Failure to amplify, shown in red, suggests
	either that the gene model is incorrect, or that the gene is expressed at very low levels.
	Detailed gene models derived from ORFeome sequencing will be added to this display in
	the future.  See <i>Reboul et al. Nat. Genet. 2003 Apr 7.</i> and 
	<a href="http://worfdb.dfci.harvard.edu" target="_blank">WORFdb</a> for further information.


[PROMOTEROME]
feature       = PCR_product:Promoterome
bgcolor       = violet
glyph         = primers
category      = Reagents
fgcolor       = black
connect       = 1
connect_color = cyan
key           = Promoterome Primers
citation      = This track indicates the location of primer pairs for the <a href="http://vidal.dfci.harvard.edu/promoteromedb/">Promoterome project</a>.

[OLIGO]
feature       = reagent:Oligo_set
glyph         = primers
category      = Reagents
height        = 4
fgcolor       = black
connect       = 1
connect_color = black
font2color    = black
fgcolor       = black
key           = Microarray oligo probes
citation      = This track contains Affymetrix GeneChip and Washington University GSC microarray probe sets.


#[GB]
#feature       = region:Genbank
#glyph         = arrow
#category      = Misc
#tick          = +2
#base          = 1
#relative_coords = 1
#fgcolor       = sienna
#key           = Genbank entry
#link          = http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Search&db=Nucleotide&doptcmdl=GenBank&term=$name[accn]
# link          = ../gbrowse_moby?id=$name;source=$class
#citation      = The C. elegans genome was submitted to the GenBank and EMBL databases in
#	in the form of a set of minimally-overlapping segments.  This track shows the
#	position of these accessioned entries.

[CANONICAL]
feature       = region:Genomic_canonical # TODO assembly_component or aggregate?
fgcolor       = sienna
glyph         = arrow
das category  = similarity
category      = Misc
label         = sub {
		my $f = shift;
		my $note = $f->attributes('Note');
	        my ($gb) = $note =~ /Genbank\s+(\S+)/;
		my $retval = $f->name;
		$retval .= " (Genbank $gb)" if $gb;
               }
height        = 7
tick          = 2
relative_coords = 1
key           = Contig submissions
citation      = This track shows the location and coordinates of contigs
        (mostly cosmids) submitted to GenBank/EMBL.
link          = sub {
                my $f = shift;
                my $note = $f->attributes('Note');
                my ($gb) = $note =~ /Genbank\s+(\S+)/;
                $gb || return undef;
		"http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Search&db=Nucleotide&doptcmdl=GenBank&term=${gb}[accn]";
                }


[CLO]
feature       = clone # TODO Aggregate?
                region:Vancouver_fosmid # TODO nucleotide_match or aggregate?
fgcolor       = sub {
		my $feature = shift;
		return 'aqua' if !defined $feature->start || !defined $feature->stop;
		return 'black';
	}
das category   = structural
category      = Reagents
glyph         = anchored_arrow
height        = 7
key           = YACs, Fosmids, & Cosmids
font2color    = aqua
description   = sub {
		my $feature = shift;
		return 'Warning: Clone end(s) not known/shown.'
			unless defined $feature->start && defined $feature->end;
		1;
	}
title         = sub {
		my $f = shift;
			my $start = $f->start;
			my $ref = $f->ref;
			my $stop = $f->stop;
			my $name = $f->name;
		if ($f->source eq 'Vancouver_fosmid') {
			return "Vancouver fosmid: $name $ref:$start..$stop";
		}
		$start ||= '-';
		$stop  ||= '-';
		return "YACs, Fosmids, & Cosmids: $name $ref:$start..$stop";
	}
citation      = This track shows the locations of the cosmids, fosmids, and YACs used for the
	physical mapping and sequencing of the C. elegans genome.  The clone termini
	do not necessarily correspond to the termini of submitted GenBank/EMBL entries.
	In some cases the exact termini of the clones is not known.  For example, YACs
	were sequenced using PCR amplification across gaps in the cosmid maps.  When
	a clone end is not known, it is shown as an arrow extending to the end of the 
	display.  Such data is to be treated with caution.  The Vancouver fosmids can be ordered directly 
        from <a href="http://www.geneservice.co.uk/products/clones/Celegans_Fos.jsp">GeneService</a>.

[LINK]
feature       = region:Link Sequence:Chromosome # TODO assembly_component or aggregate?
fgcolor       = black
glyph         = arrow
das category  = structural
category      = Misc
height        = 7
tick          = 2
relative_coords = 1
key           = Links and Superlinks
citation      = This track shows the location and coordinates of contigs
	created during the assembly of the C. elegans genome.



################################################
# Sequence Features
################################################
[GENOME_SEQUENCE_ERROR]
# EG: WBsf267823, III: 13536936
feature       = possible_base_call_error:RNASeq
category      = Misc:Sequence Features
glyph         = box
bgcolor       = red
fgcolor       = black
label         = sub {
	      my $f = shift;	      
	      my $name = $f->name;
	      return $f->name;
	      }
key           = Genome sequence errors
citation      = Positions within the reference genome sequence that has been
                identified as having a base call error. This error has not yet been
                corrected.


[CORRECTED_GENOME_SEQUENCE_ERROR]
# EG: WBsf047679; III:10553079..10553089
feature       = base_call_error_correction:RNASeq
category      = Misc:Sequence Features
glyph         = box
bgcolor       = green
fgcolor       = black
label         = sub {
	      my $f = shift;	      
	      my $name = $f->name;
	      return $f->name;
	      }
key           = Genome sequence corrections
citation      = Positions within the reference genome sequence that was previously
                identified as having a base call error. This error has now been
                corrected.

[SEGMENTAL_DUPLICATION]
feature       = duplication:segmental_duplication
category      = Misc:Sequence Features
glyph         = box
bgcolor       = white
fgcolor       = black
label         = sub {
	      my $f = shift;
	      return $f->notes || $f;
	      }
key           = Segmental duplication
citation      = Polymorphic segmental duplication as defined by the tool OrthoCluster. This feature represents one sequence from a pair of duplicons in the N2 genome.

[TRANSCRIPTION_FACTOR_BINDING_SITE]
# EG: WBsf047616, III:12550176..12550196
feature       = TF_binding_site:TF_binding_site
category      = Misc:Binding Sites & Regions
glyph         = box
bgcolor       = green
fgcolor       = black
label         = sub {
	      my $f = shift;
	      my $name = $f->attributes('TF_name');
	      return "Transcription factor: $name";
	      }
key           = Transcription factor binding site
citation      = Sites where there is experimental evidence of a transcription factor
                binding site.


[TRANSCRIPTION_FACTOR_BINDING_REGION]
feature       = TF_binding_site:TF_binding_site_region
category      = Misc:Binding Sites & Regions
glyph         = box
bgcolor       = green
fgcolor       = black
label         = sub {
	      my $f = shift;
	      my $name = $f->attributes('TF_name');
	      return "Transcription factor: $name";
	      }
key           = Transcription factor binding region
citation      = Regions within which there is experimental evidence of one or more
                binding sites of a transcription factor.



[TRANSCRIPTION_FACTOR_BINDING_REGION]
feature       = transcribed_fragment:TranscriptionallyActiveRegion
category      = Misc:Sequence Features
glyph         = box
bgcolor       = green
fgcolor       = black
label         = sub {
	      my $f = shift;
	      my $name = $f->name;
	      my $notes = $f->notes;
	      return "$notes";
	      }
key           = Transcriptionally Active Region
citation      = Transcriptionally Active Regions (TARs) found by the Miller lab from tiling-array projects run as part of the modENCODE project.




[TRANSCRIPTION_START_SITE]
feature       = TSS:RNASeq
category      = Misc:Sequence Features
glyph         = box
bgcolor       = white
fgcolor       = black
label         = sub {
	      my $f = shift;
	      return $f->notes || $f;
	      }
key           = Transcription start site
citation      = Transcription_start_site defined by analysis of RNASeq short read datasets (example Hillier et al.)

[TRANSCRIPTION_END_SITE]
feature       = transcription_end_site:RNASeq
category      = Misc:Sequence Features
glyph         = box
bgcolor       = white
fgcolor       = black
label         = sub {
	      my $f = shift;
	      return $f->notes || $f;
	      }
key           = Transcription end site
citation      = Transcription_end_site defined by analysis of RNASeq short read datasets (example Hillier et al.)


################################################
# CURATION ANOMALIES
################################################
#include includes/curation_anomalies.conf


[AUGUSTUS_NGASP]
feature      = ngasp_gene:nGASP_AUGUSTUS
label        = 1
description  = 1
key          = nGASP AUGUSTUS gene predictions
#glyph        = wormbase_transcript
glyph        = transcript2
category     = nGASP Genes
title        = AUGUSTUS gene $name
citation     = AUGUSTUS gene set from the nGASP competition.  Courtesy of Mario Stanke.
               Gene models are available for download at ftp.wormbase.org/pub/wormbase/nGASP

[mGENE_NGASP]
feature      = ngasp_gene:nGASP_mGENE
label        = 1
description  = 1
key          = nGASP mGENE gene predictions
glyph        = wormbase_transcript
category     = nGASP Genes
title        = mGENE gene $name
citation     = mGENE gene set from the nGASP competition.  Courtesy of Gabriele Schweikert and Gunnar Raetsch.
               Gene models are available for download at ftp.wormbase.org/pub/wormbase/nGASP

[FGENESHN_NGASP]
feature      = ngasp_gene:nGASP_FGENESH
label        = 1
description  = 1
key          = nGASP FGENESH gene predictions
glyph        = wormbase_transcript
category     = nGASP Genes
title        = FGENESH++ gene $name
citation     = FGENESH++ gene set from the nGASP competition.  Courtesy of Darin Blasiar.
               Gene models are available for download at ftp.wormbase.org/pub/wormbase/nGASP
[JIGSAW_NGASP]
feature      = ngasp_gene:nGASP_jigsaw
label        = 1
description  = 1
key          = nGASP JIGSAW combined genes
glyph        = wormbase_transcript
category     = nGASP Genes
title        = JIGSAW gene $name
citation     = JIGSAW gene set from the nGASP competition.  This is the combined gene set for AUGUSTUS
               mGENE and FGENESH++.  Courtesy of Darin Blasiar.
               Gene models are available for download at ftp.wormbase.org/pub/wormbase/nGASP


[ETILE:40001]
glyph         = wiggle_density

[ETILE]
smoothing     = mean
smoothing window = 16
max_score     = 15
feature       = microarray_oligo:non_polyA
                microarray_oligo:polyA
                microarray_oligo:small_non_polyA
description   = 0
sort_order    = sub ($$) {
                  my $a = shift->feature->source_tag;
                  my $b = shift->feature->source_tag;
                  return -1 if $a =~ /^poly/;
                  return 1  if $b =~ /^poly/;
                  return 0;
                }
glyph         = wiggle_xyplot
glyph select  = wiggle_density wiggle_xyplot
height        = 40
bgcolor       = black
category      = Phenotype/Expression Tracks
key           = Mixed-stage tiling arrays
balloon hover = Affymetrix tiling array data from He et al. (2007) <b>Mapping the <i>C. elegans</i> noncoding transcriptome with a whole-genome tiling microarray</b>
label         = sub {
                  my $feature = shift;
                  my $desc = $feature->source_tag;
                  $desc =~ s/adenylated/A/;
                  $desc =~ s/mixed_stage_//;
                  $desc =~ s/small.+/small RNA/;
                  return $desc;
                }
label_position = left
citation      = <b>Life_stage</b>  mixed stage<br>
 <b>Strain</b>  N2<br>
 <b>Remark</b>  The data were analyzed with Affymetrix Tiling analysis software (version 1.0.15). Frequency is a log2(max(PM-MM,1))
 value for each probe, after quantile-normalization and median intensity scaling for
 all replicates. See <a href="http://www.ncbi.nlm.nih.gov/sites/entrez?db=pubmed&cmd=retrieve&dopt=AbstractPlus&list_uids=17785534"
 target="_new" title="Mapping the C. elegans noncoding transcriptome with a whole-genome tiling microarray">
 He et al., 2007</a> for details.

[AdjustedNSome]
feature        = microarray_oligo:AdjustedNSome_coverage.collapsed # TODO Pair not found in data anymore.
glyph          = wiggle_xyplot
glyph select   = wiggle_density wiggle_xyplot
pos_color      = magenta
neg_color      = violet
label          = sub { (shift->attributes('Note'))[0] }
#label_position = left
min_score      = -3
max_score      = 3
smoothing      = mean
smoothing window  = 6
key            = Nucleosome Coverage (adjusted)
category       = Misc
graph_height   = 40
citation       = Adjusted Nucleosome coverage from <a href="http://genome.cshlp.org/cgi/content/short/18/7/1051">
 Valouev et al.,Genome Res. 18:1051-63</a>, downloaded from
 <a href="http://genome.ucsc.edu/cgi-bin/hgTrackUi?hgsid=111781230&c=chrII&g=nucleosomeAdjustedCoverage">the UCSC</a>.
 The plot represents relative mononucleosome enrichment at each position in the genome (on a log of 2 scale).
 The coverage metric is given according to a formula [ (1+n)/N ] / [ (1+c)/C ] where n and c are the numbers
 of putative 147 base pair cores covering each base pair from nucleosome and control data, N and C are the
 total number of nucleosome and control reads obtained by SOLiD sequencing with 25 base pairs mapped to the
 reference genome.

[NSome]
# TODO Pairs not found in data anymore.
feature        = microarray_oligo:NSome_coverage.minus.collapsed
                 microarray_oligo:NSome_coverage.plus.collapsed
glyph          = wiggle_xyplot
glyph select   = wiggle_density wiggle_xyplot
bgcolor        = sub { shift->source_tag =~ /minus/ ? 'green' : 'blue' }
label          = sub { (shift->attributes('Note'))[0] }
smoothing      = mean
smoothing window  = 6
key            = Nucleosome Coverage
category       = Misc
max_score      = 200
graph_height   = 40
citation       = Adjusted Nucleosome coverage from <a href="http://genome.cshlp.org/cgi/content/short/18/7/1051">
 Valouev et al.,Genome Res. 18:1051-63</a>, downloaded from
 <a href="http://genome.ucsc.edu/cgi-bin/hgTrackUi?hgsid=111781230&c=chrII&g=nucleosomeAdjustedCoverage">the UCSC</a>.
 The plot represents relative mononucleosome enrichment at each position in the genome (on a log of 2 scale).
 The coverage metric is given according to a formula [ (1+n)/N ] / [ (1+c)/C ] where n and c are the numbers
 of putative 147 base pair cores covering each base pair from nucleosome and control data, N and C are the
 total number of nucleosome and control reads obtained by SOLiD sequencing with 25 base pairs mapped to the
 reference genome.

[MNase]
# TODO Pairs not found in data anymore.
feature        = microarray_oligo:MNase_coverage.minus.collapsed
                 microarray_oligo:MNase_coverage.plus.collapsed
glyph          = wiggle_xyplot
glyph select   = wiggle_density wiggle_xyplot
bgcolor        = sub { shift->source_tag =~ /minus/ ? 'brown' : 'orange' }
label          = sub { (shift->attributes('Note'))[0] }
graph_height   = 40
smoothing      = mean
smoothing window  = 6
key            = Nucleosome Coverage (MNase control)
category       = Misc
citation       = Adjusted Nucleosome coverage from <a href="http://genome.cshlp.org/cgi/content/short/18/7/1051">
 Valouev et al.,Genome Res. 18:1051-63</a>, downloaded from
 <a href="http://genome.ucsc.edu/cgi-bin/hgTrackUi?hgsid=111781230&c=chrII&g=nucleosomeAdjustedCoverage">the UCSC</a>.
 The plot represents relative mononucleosome enrichment at each position in the genome (on a log of 2 scale).
 The coverage metric is given according to a formula [ (1+n)/N ] / [ (1+c)/C ] where n and c are the numbers
 of putative 147 base pair cores covering each base pair from nucleosome and control data, N and C are the
 total number of nucleosome and control reads obtained by SOLiD sequencing with 25 base pairs mapped to the
 reference genome.

[FTILE_N2:40001]
max_score     = 200
glyph     = wiggle_density

[FTILE_N2]
smoothing     = mean
smoothing window = 16
max_score     = 1500
# TODO Aggregates? Otherwise, pairs are not found in data anymore.
feature       = microarray_oligo:CEwtN2Emb
                microarray_oligo:CEwtN2GA
                microarray_oligo:CEwtN2L2
                microarray_oligo:CEwtN2L3
                microarray_oligo:CEwtN2L4
                microarray_oligo:CEwtN2YA
description   = 0
sort_order    = sub ($$) {
                  my $a = shift->feature->source_tag;
                  my $b = shift->feature->source_tag;
                  return 1  if $a =~ /GA/;
                  return -1 if $b =~ /GA/;
                  return -1 if $a =~ /Emb/;
                  return 1  if $a =~ /A/ && $b !~ /A/;
                  my ($sa) = $a =~ /L(\d+)/;
                  my ($sb) = $b =~ /L(\d+)/;
                  if ($sa && $sb) {
                    return -1 if $sa < $sb;
                    return 1 if $sa > $sb;
                  }
                  return 0;
                }
glyph         = wiggle_xyplot
glyph select  = wiggle_density wiggle_xyplot
height        = 40
bgcolor       = black
category      = Phenotype/Expression Tracks
key           = N2 tiling arrays
label         = sub {
                  my $feature = shift;
                  my $desc = $feature->source_tag;
                  $desc =~ s/CEwtN2//;
                  $desc =~ s/G/gravid /;
                  $desc =~ s/Y/young /;
                  $desc =~ s/A/adult/;
                  return $desc;
                }
label_position = left
citation       =
  <b>Strain</b>  N2<br>
  <b>Remark</b>  Provided by the Andrew Fraser group.
  The data were analysed using TAS (version 1.1 Build 2, 5/10/2006) with probes originally mapped to
  WS150 version of the genome.  Quantile normalization was carried out and probe intensity was median scaled.

[FTILE_smg1:40001]
max_score = 200
glyph     = wiggle_density


[FTILE_smg1]
smoothing     = mean
smoothing window = 16
max_score     = 1500
# TODO Aggregate? Otherwise, pairs not found in data anymore.
feature       = microarray_oligo:CEmssmg1GA
                microarray_oligo:CEmssmg1L3
                microarray_oligo:CEmssmg1L4
                microarray_oligo:CEmssmg1YA
sort_order    = sub ($$) {
                  my $a = shift->feature->source_tag;
                  my $b = shift->feature->source_tag;
                  return 1  if $a =~ /GA/;
                  return -1 if $b =~ /GA/;
                  return -1 if $a =~ /Emb/;
                  return 1  if $a =~ /A/ && $b !~ /A/;
                  my ($sa) = $a =~ /L(\d+)/;
                  my ($sb) = $b =~ /L(\d+)/;
                  if ($sa && $sb) {
                    return -1 if $sa < $sb;
                    return 1 if $sa > $sb;
                  }
                  return 0;
                }
glyph         = wiggle_xyplot
glyph select   = wiggle_density wiggle_xyplot
height        = 40
bgcolor       = black
category      = Phenotype/Expression Tracks
key           = smg-1 tiling arrays
label         = sub {
                  my $feature = shift;
                  my $desc = $feature->source_tag;
                  $desc =~ s/CEmssmg1//;
                  $desc =~ s/G/gravid /;
                  $desc =~ s/Y/young /;
                  $desc =~ s/A/adult/;
                  return $desc;
                }
label_position = left
citation       =
  <b>Strain</b>  N2<br>
  <b>Remark</b>  Provided by Andrew Fraser&#39;s group.
  The data were analysed using TAS (version 1.1 Build 2, 5/10/2006) with probes originally mapped to
  WS150 version of the genome.  Quantile normalization was carried out and probe intensity was median scaled.


############################################################
#
#  modENCODE data
#
############################################################

# Jason Lieb tracks
# 
# no smoothing for large segments
#[LIEBChIP_chip:40001]
#smoothing window  = 1
#
## semantic zoom to wiggle_density over 40 kb
#[LIEBChIP_chip:40001]
#glyph             = wiggle_density
# 
## default glyph is wiggle xyplot
#[LIEBChIP_chip]
#feature           = microarray_oligo:HTZ-1_mean
#                     microarray_oligo:DPY-27_mean_zscore
#                     microarray_oligo:SDC3_mean_zscore
#glyph             = wiggle_xyplot
#glyph select      = wiggle_density wiggle_xyplot
#neg_color         = orange
#pos_color         = blue
#min_score         = -1.5
#max_score         = 1.5
#height            = 40
#label             = sub {
#                       my $src = shift->source_tag;
#                       $src =~ s/_\S+$//;
#                       $src =~ s/Lieb_//;
#                       $src;
#                     }
#label_position    = left
#smoothing         = mean
#smoothing window  = 16
#key               = ChIP-chip arrays
#category          = modENCODE Tracks: Lieb Group
#title             = <b>$name ChIP-chip experiment from the Lieb group</b><br>
#                      The color scheme is orange &lt; zero &gt; blue.
#                      Color-intensity corresponds to signal amplitude, truncated
#                      to the range of <span style=white-space:nowrap>
#                      -1.0 - &#43;1.0 &#40;-2.0 - &#43;2.0</span> for H3 experiments&#41;
#citation          = ChIP-chip experiments from labs in the Lieb group.  Regions shown in orange are less than zero and in blue are greater than zero.
#                     The intensity of the color indicates the signal amplitude.  The range is truncated at -2:+2.  The mean scores for three biological
#                     replicate experiments were used.
 
#[LIEB_computed_peaks]
#feature           = microarray_oligo:DPY-27_chrX_peaks
#                     microarray_oligo:HTZ-1_peaks
#                     microarray_oligo:SDC3_chrX_peaks
#glyph             = wiggle_box
#glyph select      = wiggle_box
#height            = 8
#fgcolor           = blue
#bgcolor           = blue
#label             = sub {
#                       my $src = shift->source_tag;
#                       $src =~ s/_\S+//g;
#                       $src =~ s/Lieb_//;
#                       $src;
#                     }
#label_position    = left
#key               = ChIP-chip computed peaks
#category          = modENCODE Tracks: Lieb Group
#title          = sub {
#                    my $name = shift->name;
#                    $name =~ s/_\S+//;
#                    "<b>Computed peaks for ChIP-chip arrays from labs in the Lieb group: $name</b><br>".
#                    "Computed peaks are putative binding sites for $name";
#                 }
# citation       = Computed peaks are regions for which the signal in the ChIP-chip array are significantly above background levels.  Such regions are
#                  putative binding sites for the protein targeted by the antibody.
 
  
# GBrowse stanza configuration for tracks generated
# for project #43: HTZ-1_N2_Mixed_Embryos (BK00001_HTZ1_N2_MXEMB)
 
#[HTZ1_N2_Mi_WIG_2067_43]
#feature = WIG:2067
#bicolor_pivot = zero
#smoothing = mean
#label = sub { return shift->name; }
#citation = TEST
#max_score = 3
#glyph = wiggle_xyplot
#bump density = 250
#category = Preview
#pos_color = blue
#data_source_id = 43
#sort_order = sub ($$) {shift->feature->name cmp shift->feature->name}
#stranded = 0
#connector = solid
#fgcolor = black
#track_id = 2067
#glyph select = wiggle_density wiggle_xyplot
#min_score = -3
#label_transcripts = 
#label density = 100
#smoothing_window = 10
#neg_color = orange
#key = 43 -normalized_data/HTZIP2_WS180.wig- WIG:2067
#group_on = 
#bgcolor = lightgrey


#[HTZ1_N2_Mi_binding_site_2071_43]
#label = sub { return shift->name; }
#citation = TEST
#feature = binding_site:2071_details
#glyph = segments
#bump density = 250
#category = Preview
#data_source_id = 43
#stranded = 0
#connector = solid
#fgcolor = black
#track_id = 2071
#label_transcripts = 
#label density = 100
#key = HTZ-1 Binding Peaks in Mixed Embryos from N2
#group_on = 
#bgcolor = lightgrey
 
#[HTZ1_N2_Mi_binding_site_2071_43:100002]
#label = sub { return shift->name; }
#feature = binding_site:2071
#glyph = wiggle_density
#stranded = 0
#fgcolor = black
#group_on = 
#bgcolor = lightgrey


## LIEB TRACKS:

#include modencode/lieb/*.conf

## HENIKOFF TRACKS:

#include modencode/henikoff/*.conf

## PIANO TRACKS:

#include modencode/piano/*.conf

## SNYDER TRACKS:

#include modencode/snyder/*.conf

## WATERSTON TRACKS:

#include modencode/waterston/*.conf

