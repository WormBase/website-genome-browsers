#####################################################
#
# NOTE! This configuration file was programmatically
# generated.  You can edit this in-place for testing
# purposes but all changes will
# need to be moved to CreateGBrowseConfigFiles.pm
#
#####################################################
[Aligner:plugin]
upcase_tracks = CDS GENES
alignable_tracks = EST_BEST EST_OTHER MRNA_BEST
align_default = EST_BEST
upcase_default = CDS


[CDS]
frame2f = darkblue
frame0r = darkred
require_subparts = 1
height = 13
description = 0
key = Coding Segments
frame0f = cadetblue
feature = CDS:WormBase CDS:WormBase_imported
label = sub { my $feature = shift;
 my $ids = join(", ", $feature->load_id);
 $ids =~ s/CDS://g;
 return "Frame usage for " . $ids;
 }

category = Genes
frame1r = red
citation = This track shows the reading frames of coding segments (also known as "CDS" features).
glyph = cds
frame1f = blue
frame2r = crimson


[DETAIL SELECT MENU]
width = 260
html = <table style="width:100%"> <tr> <th style="background:lightsteelblue;cell-padding:5"> SELECTION <span style="right:0px;position:absolute;color:blue;cursor:pointer" onclick="SelectArea.prototype.cancelRubber()"> [X] </span> </th> </tr> <tr> <td> <a href="javascript:SelectArea.prototype.clearAndSubmit()"> Zoom in </a> </td> </tr> <tr> <td onmouseup="SelectArea.prototype.cancelRubber()"> <a href="?plugin=FastaDumper;plugin_action=Go;name=SELECTION" target="_new"> Dump selection as FASTA </a> </td> </tr> <!-- <tr> <td onmouseup="SelectArea.prototype.cancelRubber()"> <a href="http://modencode.oicr.on.ca/cgi-bin/gb2/gbrowse/worm/?name=SELECTION" target="_new"> Browse selection at modENCODE </a> </td> </tr> --> <tr> <td onmouseup="SelectArea.prototype.cancelRubber()"> <a href="http://genome.ucsc.edu/cgi-bin/hgTracks?clade=worm&org=C.+elegans&db=ce4&position=chrSELECTION&pix=620&Submit=submit" target="_new"> Browse selection at UCSC </a> </td> </tr> <tr> <td onmouseup="SelectArea.prototype.cancelRubber()"> <a href="?name=SELECTION;plugin=Submitter;plugin_do=Go;Submitter.target=UCSC_BLAT" target="_new"> BLAT this sequence </a> </td> </tr> <tr> <td onmouseup="SelectArea.prototype.cancelRubber()"> <a href="?name=SELECTION;plugin=Submitter;plugin_do=Go;Submitter.target=NCBI_BLAST" target="_new"> BLAST this sequence </a> </td> </tr> </table>


[DNA/GC Content]
global feature = 1
fgcolor = red
strand = both
category = DNA
height = 40
glyph = dna


[EST_BEST]
draw_target = 1
ragged_start = 1
height = 5
key = ESTs (best)
feature = expressed_sequence_match:BLAT_EST_BEST
group_pattern = /\.[35]$/
mismatch_color = yellow
bgcolor = limegreen
fgcolor = black
das category = transcription
category = Transcription:Supporting Evidence
connector = solid
show_mismatch = 1
glyph = segments
citation = Native (same-species) Expressed Sequence Tags (ESTs), aligned to the genome using <a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">BLAT</a>. This track shows the best unique location for each EST. Other EST matches, some of which may represent repetitive elements, are shown in the track labeled "ESTs (other)". The paired 5' and 3' ESTs from the same cDNA clone are connected by a dashed line.


[EST_BEST:50000]
glyph = box


[EST_OTHER]
show_mismach = 1
draw_target = 1
ragged_start = 1
height = 6
key = ESTs (other)
feature = expressed_sequence_match:BLAT_EST_OTHER
group_pattern = /\.[35]$/
bgcolor = lightgray
fgcolor = black
category = Transcription:Supporting Evidence
connector = solid
glyph = segments
citation = Native (same-species) Expressed Sequence Tags (ESTs), aligned to the genome using <a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">BLAT</a>. This track shows ESTs that align multiple times, some of which represent repetitive regions. For the "best" match, see the track labeled "ESTs (best)". The paired 5' and 3' ESTs from the same cDNA clone are connected by a dashed line.


[EST_OTHER:50000]
glyph = box


[GENES]
utr_color = gray
balloon hover = sub { my $f = shift;
 my ($transcript) = $f->attributes('sequence_name');
 $transcript ||= $f->name;
 my ($locus)  = $f->attributes('Alias');
 my $message;
 my $type;
 if ($f->type =~ /gene/i) {
 ($type) = $f->attributes('biotype');
 $type =~ s/_/ /g;
 } elsif ($f->type =~ /mRNA/i) {
 $type = 'protein coding';
 $message = "<i>click to view Transcript Report</i>";
 }
 my @return;
 if ($type) {
 push @return,"<b>$transcript</b>";
 push @return,"Type: $type"            if $type;
 push @return,"Locus: <i>$locus</i>"   if $locus;
 } else {
 if ($transcript && $locus) {
 push @return,"<b>$locus ($transcript)</b>";
 } else {
 push @return,"<b>$transcript</b>";
 }
 push @return,"<i>click to view Gene Report</i>";
 }
 return join("<br />",@return,$message);
 }

label_transcripts = 1
key = Genes
feature = gene:WormBase gene:WormBase_imported
bgcolor = sub { my $f = shift;
 my $type = $f->type;
 return 'gray'   if $f->type =~ /exon|pseudogene|ncrna/i;
 return 'violet' if $f->strand > 0;
 return 'turquoise';
 }

font2color = blue
category = Genes
citation = The purple and blue colors indicate transcripts on the forward and reverse strands respectively. If sufficient room is available between features, gene models end with a triangle; if not a small arrow is used.
link = sub { my $f = shift;
 my $transcript = $f->name;
 return if $f->type eq 'ncRNA:RNAz';
 my ($locus)  = $f->attributes('Alias');
 if ($f->type =~ /Gene/i) {
 return "/get?name=$transcript;class=Gene";
 } elsif ($transcript && $locus) {
 return "/get?name=$transcript;class=Transcript";
 } else {
 return "/get?name=$transcript;class=Gene";
 }
 }

box_subparts = 1
description = sub { my $f = shift;
 my ($biotype) = $f->attributes('biotype');
 $biotype =~ s/_/ /g;
 return $biotype;
 }

height = sub { my $f = shift;
 return $f->type =~ /mRNA|CDS|UTR/i ? 10 : 6;
 }

fgcolor = black
label = sub { my $f = shift;
 my ($locus)  = $f->attributes('Alias');
 my ($name) = $f->attributes('sequence_name');
 if ($name eq $locus) {
 return $name;
 } elsif ($name && $locus) {
 return "$locus ($name)";
 } elsif ($locus) {
 return $locus;
 } else {
 return $name;
 }
 }

title = sub { my $f = shift;
 return "Curated transcript " . $f->display_name . "<br /><i>click for details";
 }

glyph = gene


[GENES:150000]
bgcolor = sub {shift->strand>0?'violet':'turquoise'}
strand_arrow = 1
description = 0
glyph = generic


[GENES_NONCODING]
link = sub { my $f = shift;
 my $name = $f->attributes('Gene') || $f->name;
 return "/get?name=$name;class=Gene";
 }

utr_color = gray
balloon hover = sub { my $f = shift;
 my ($transcript) = $f->display_name;
 my ($locus)  = $f->attributes('Alias');
 my @return;
 if ($transcript && $locus) {
 push @return,"<b>$locus ($transcript)</b>";
 } else {
 push @return,"<b>$transcript</b>";
 }
 push @return,"<i>click to view Gene Report</i>";
 return join("<br />",@return);
 }

description = sub { my $f = shift;
 my $type = $f->type;
 return $f->method;
 }

height = sub { my $f = shift;
 return $f->type =~ /mRNA|CDS|UTR/i ? 10 : 6;
 }

key = Curated Genes (noncoding)
feature = miRNA:WormBase ncRNA:WormBase rRNA:WormBase scRNA:WormBase snRNA:WormBase snoRNA:WormBase tRNA:WormBase piRNA:WormBase lincRNA:WormBase antisense_RNA
bgcolor = sub { my $f = shift;
 my $type = $f->type;
 return 'gray'   if $f->type =~ /exon|pseudogene/i;
 return 'violet' if $f->strand > 0;
 return 'turquoise';
 }

fgcolor = black
label = sub { my $f = shift;
 my ($locus)  = $f->attributes('Alias');
 my ($name)   = $f->display_name;
 if ($name eq $locus) {
 return $name;
 } else {
 return $locus ? "$locus ($name)" : $name;
 }
 }

title = sub { my $f = shift;
 return "Curated transcript " . $f->display_name . "<br /><i>click for details";
 }

category = Genes
font2color = blue
glyph = gene
citation = Non-coding curated gene models, including ncRNA, tRNA, miRNA, snRNA, snoRNA, piRNA, lincRNA and antisense RNA.


[GENES_NONCODING:150000]
bgcolor = sub {shift->strand>0?'violet':'turquoise'}
strand_arrow = 1
description = 0
glyph = transcript


[GENES_PROTEIN_CODING]
link = sub { my $f = shift;
 my $name = $f->attributes('Gene') || $f->name;
 return "/get?name=$name;class=Gene";
 }

utr_color = gray
balloon hover = sub { my $f = shift;
 my ($transcript) = $f->display_name;
 my ($locus)  = $f->attributes('Alias');
 my @return;
 if ($transcript && $locus) {
 push @return,"<b>$locus ($transcript)</b>";
 } else {
 push @return,"<b>$transcript</b>";
 }
 push @return,"<i>click to view Gene Report</i>";
 return join("<br />",@return);
 }

description = sub { my $f = shift;
 my $type = $f->type;
 return 'protein coding';
 }

height = sub { my $f = shift;
 return $f->type =~ /mRNA|CDS|UTR/i ? 10 : 6;
 }

key = Genes (protein coding)
feature = CDS:WormBase
bgcolor = sub { my $f = shift;
 my $type = $f->type;
 return 'gray'   if $f->type =~ /exon|pseudogene/i;
 return 'violet' if $f->strand > 0;
 return 'turquoise';
 }

fgcolor = black
label = sub { my $f = shift;
 my ($locus)  = $f->attributes('Alias');
 my ($name) = $f->display_name;
 if ($name eq $locus) {
 return $name;
 } else {
 return $locus ? "$locus ($name)" : $name;
 }
 }

title = sub { my $f = shift;
 return "Curated transcript " . $f->display_name . "<br /><i>click for details";
 }

category = Genes
font2color = blue
glyph = gene
citation = A subset of the full Curated Genes set limited to protein-coding genes only. Only the CDS is represented. Full models (with UTRs) can be seen on the "Curated Genes" track.


[GENES_PROTEIN_CODING:150000]
bgcolor = sub {shift->strand>0?'violet':'turquoise'}
strand_arrow = 1
description = 0
glyph = transcript


[GENES_PSEUDOGENES]
link = sub { my $f = shift;
 my $name = $f->attributes('Gene') || $f->name;
 return "/get?name=$name;class=Gene";
 }

utr_color = gray
balloon hover = sub { my $f = shift;
 my ($transcript) = $f->display_name;
 my ($locus)  = $f->attributes('Alias');
 my @return;
 if ($transcript && $locus) {
 push @return,"<b>$locus ($transcript)</b>";
 } else {
 push @return,"<b>$transcript</b>";
 }
 push @return,"<i>click to view Gene Report</i>";
 return join("<br />",@return);
 }

description = sub { my $f = shift;
 return 'pseudogene';
 }

height = sub { my $f = shift;
 return $f->type =~ /mRNA|CDS|UTR/i ? 10 : 6;
 }

key = Genes (pseudogenes)
feature = pseudogenic_transcript:WormBase
bgcolor = sub { my $f = shift;
 my $type = $f->type;
 return 'gray'   if $f->type =~ /exon|pseudogene/i;
 return 'violet' if $f->strand > 0;
 return 'turquoise';
 }

fgcolor = black
label = sub { my $f = shift;
 my ($locus)  = $f->attributes('Alias');
 my ($name)   = $f->display_name;
 if ($name eq $locus) {
 return $name;
 } else {
 return $locus ? "$locus ($name)" : $name;
 }
 }

title = sub { my $f = shift;
 return "Curated pseudogene " . $f->display_name . "<br /><i>click for details";
 }

category = Genes
font2color = blue
glyph = gene
citation = A subset of the full Curated Genes set limited to pseudogenes only.


[GENES_PSEUDOGENES:150000]
bgcolor = sub {shift->strand>0?'violet':'turquoise'}
strand_arrow = 1
description = 0
glyph = transcript


[GENOMIC_CANONICAL]
link = sub { my $f = shift;
 my $note = $f->attributes('Note');
 my ($gb) = $note =~ /Genbank\s+(\S+)/;
 $gb || return undef;
 "http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?cmd=Search&db=Nucleotide&doptcmdl=GenBank&term=${gb}[accn]";
 }

height = 7
key = Contig submissions
feature = assembly_component:Genomic_canonical
fgcolor = sienna
relative_coords = 1
label = sub { my $f = shift;
 my $note = $f->attributes('Note');
 my ($gb) = $note =~ /Genbank\s+(\S+)/;
 my $retval = $f->name;
 $retval .= " (Genbank $gb)" if $gb;
 }

das category = similarity
category = Genome Structure:Assembly & Curation
tick = 2
glyph = arrow
citation = This track shows the location and coordinates of contigs (mostly cosmids) submitted to GenBank/EMBL.


[HISTORICAL_GENES]
utr_color = gray
link = sub { my $f = shift;
 my $transcript = $f->name;
 return "/get?name=$transcript;class=Gene";
 }

balloon hover = sub { my $f = shift;
 my $name = $f->name;
 my $method = $f->method;
 $method =~ s/_/ /g;
 return "<b>Historical gene prediction</b><br>$name<br>$method";
 }

height = 10
description = sub { my $f = shift;
 my $method = $f->method;
 $method =~ s/_/ /g;
 return "$method";
 }

key = Gene Models (historical)
feature = pseudogenic_transcript:history transposable_element:history protein_coding_primary_transcript:history primary_transcript:history nc_primary_transcript:history
fgcolor = black
bgcolor = sub {shift->strand>0?'violet':'turquoise'}
title = Historical gene prediction $name
category = Genes
font2color = blue
label = sub { my $f = shift;
 my $name = $f->display_name;
 return $name;
 }

glyph = transcript
citation = Historical gene predictions.


[HISTORICAL_GENES:150000]
bgcolor = white
strand_arrow = 1
description = 0
glyph = transcript


[LOCI:overview]
feature = gene:landmark
bgcolor = lavender
label = sub { my $f = shift;
 return $f->attributes('Locus');
 }

height = 5
glyph = generic
key = Landmarks


[MICROARRAY_OLIGO_PROBES]
height = 4
key = Microarray oligo probes
feature = reagent:Oligo_set
fgcolor = black
connect_color = black
font2color = black
category = Reagents
connect = 1
glyph = primers
citation = This track contains Affymetrix GeneChip and Washington University GSC microarray probe sets.


[MRNA_BEST]
show_mismach = 1
draw_target = 0
ragged_start = 1
height = 6
key = mRNAs/ncRNAs (best)
feature = expressed_sequence_match:BLAT_mRNA_BEST expressed_sequence_match:BLAT_ncRNA_BEST
fgcolor = black
bgcolor = sub { my $f = shift;
 return 'yellow' if ($f->source =~ /BLAT_mRNA_BEST/);
 return 'grey';
 }

label = sub { my $f = shift;
 my $label = ($f->source =~ /BLAT_mRNA_BEST/) ? 'mRNA' : 'ncRNA';
 my $name = $f->name;
 return "$label: $name";
 }

category = Transcription:Supporting Evidence
connector = solid
glyph = segments
citation = Native (same species) full length cDNAs and ncRNAs aligned to the genome using <a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">BLAT</a>. This track shows the best unique location for each cDNA. Other cDNA matches, some of which may represent repetitive elements, are shown in the track labeled "mRNAs/ncRNAs (other)".


[MRNA_BEST:50000]
glyph = box


[MotifFinder:plugin]
matrix = matrices.txt


[REPEATS_DUST]
link = 0
height = 4
description = sub { my $f = shift;
 my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
 my $method = $f->method;
 $method =~ s/_/ /g;
 return join('; ',$f->notes,"$ref: $start..$stop");
 }

key = Low complextity region (Dust)
feature = low_complexity_region:dust
bgcolor = bisque
fgcolor = black
connector = none
category = Genome Structure:Repeats
label = sub { my $f = shift;
 my $method = $f->method;
 $method =~ s/_/ /g;
 return $method;
 }

citation = Low-complexity regions identified by Dust.


[REPEATS_REPEAT_MASKER]
link = 0
height = 4
description = sub { my $f = shift;
 my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
 my $method = $f->method;
 $method =~ s/_/ /g;
 return join('; ',$f->notes,"$ref: $start..$stop");
 }

key = Repeat Region (RepeatMasker)
feature = repeat_region:RepeatMasker
bgcolor = bisque
fgcolor = black
connector = none
category = Genome Structure:Repeats
label = sub { my $f = shift;
 my $label = $f->id;
 $label=~s/Motif://;
 return $label;
 }

citation = Repetitive regions identified by RepeatMasker.


[REPEATS_TANDEM_AND_INVERTED]
link = 0
height = 4
description = sub { my $f = shift;
 my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
 my $method = $f->method;
 $method =~ s/_/ /g;
 return join('; ',$f->notes,"$ref: $start..$stop");
 }

key = Tandem and Inverted Repeats
feature = inverted_repeat:inverted tandem_repeat:tandem
bgcolor = bisque
fgcolor = black
connector = none
category = Genome Structure:Repeats
label = sub { my $f = shift;
 my $method = $f->method;
 $method =~ s/_/ /g;
 return $method;
 }

citation = Exact tandem and inverted repetitive elements.


[RNASEQ]
link = sub { my $f = shift;
 my $name   = $f->name;
 return "/get?name=$name;class=Feature";
 }

bump = 0
height = sub { my $f = shift;
 my $score = $f->score;
 my $height = int($score / 2);
 $height = 50 if ($score > 100);
 $height = ($height == 0 || $height == 1) ? 2 : $height;
 return $height;
 }

key = RNASeq
feature = transcript_region:RNASeq_reads
bgcolor = black
label = sub { my $f = shift;
 my $score = $f->score;
 return "Score: $score";
 }

category = Expression
glyph = box
citation = These boxes indicate alignments of short read sequences from all available RNASeq projects. The number of reads has been normalised by averaging over the number of libraries. The height of all boxes indicates the relative score of the feature.


[RNASEQ_ASYMMETRIES]
link = sub { my $f = shift;
 my $name   = $f->name;
 return "/get?name=$name;class=Feature";
 }

bump = 0
height = sub { my $f = shift;
 my $score = $f->score;
 my $height = int($score / 20);
 $height = 50 if ($score > 1000);
 $height = ($height == 0 || $height == 1) ? 2 : $height;
 return $height;
 }

key = RNASeq Asymmetries
feature = transcript_region:RNASeq_F_asymmetry transcript_region:RNASeq_R_asymmetry
bgcolor = sub { my $f = shift;
 my $method = $f->method;
 return 'red' if $method eq 'RNASeq_R_asymmetry';
 return 'green' if $method eq 'RNASeq_F_asymmetry';
 return 'black';
 }

label = sub { my $f = shift;
 my $score = $f->score;
 return "Score: $score";
 }

category = Expression
glyph = box
citation = Red boxes indicate regions where there are more than 2 times as many forward sense RNASeq reads aligned to the genome as reverse sense reads. This asymmetrical signal has been found empirically to be a sensitive marker for the ends of transcripts. Green boxes indicate regions where there are more than 2 times as many reverse sense RNASeq reads aligned to the genome as forward sense reads. This asymmetrical signal has been found empirically to be sensitive marker for the ends of transcripts. The height of all boxes indicates the relative score of the feature.


[RNASEQ_SPLICE]
link = sub { my $f = shift;
 my $name   = $f->name;
 return "/get?name=$name;class=Feature";
 }

height = sub { my $f = shift;
 my $score = $f->score;
 my $height = int($score / 2);
 $height = 50 if ($score > 100);
 $height = ($height == 0 || $height == 1) ? 2 : $height;
 return $height;
 }

key = RNASeq introns
feature = intron:RNASeq_splice
bgcolor = green
title = sub { my $f = shift;
 my $name   = $f->name;
 my $notes  = $f->notes;
 $notes     = $name if ($notes eq '');
 return "$notes";
 }

category = Expression
label = sub { my $f = shift;
 my $score = $f->score;
 return $score ? "$score reads" : $f->name;
 }

glyph = box
citation = These are introns formed by aligned RNASeq reads spanning a region of the genome. Alignments of short read sequences from all available RNASeq projects were used. The number of reads spanning the introns is indicated by the thickness of the display.


[SEQUENCE_SIMILARITY_BMALAYI_PROTEINS_BLASTX]
height = 5
key = B. malayi proteins
feature = protein_match:bmalayi_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to WormBase B. malayi proteins, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_CBRENNERI_PROTEINS_BLASTX]
height = 5
key = C. brenneri proteins
feature = protein_match:cbrenneri_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to WormBase C. brenneri proteins, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_CBRIGGSAE_PROTEINS_BLASTX]
height = 5
key = C. briggsae proteins
feature = protein_match:cbriggsae_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to WormBase C. briggsae proteins, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_CELEGANS_PROTEINS_BLASTX]
height = 5
key = C. elegans proteins
feature = protein_match:celegans_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to WormBase C. elegans proteins, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_CJAPONICA_PROTEINS_BLASTX]
height = 5
key = C. japonica proteins
feature = protein_match:cjaponica_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to WormBase C. japonica proteins, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_CREMANEI_PROTEINS_BLASTX]
height = 5
key = C. remanei proteins
feature = protein_match:cremanei_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to WormBase C. remanei proteins, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_DMELANOGASTER_PROTEINS_BLASTX]
height = 5
key = D. melanogaster proteins
feature = protein_match:dmelanogaster_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to Drosophila melanogaster proteins from FlyBase, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_HSAPIENS_PROTEINS_BLASTX]
height = 5
key = H. sapiens proteins
feature = protein_match:hsapiens_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to Human proteins from Ensembl, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_PPACIFICUS_PROTEINS_BLASTX]
height = 5
key = P. pacificus proteins
feature = protein_match:ppacificus_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to WormBase P. pacificus proteins, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_SCEREVISIAE_PROTEINS_BLASTX]
height = 5
key = S. cerevisiae proteins
feature = protein_match:scerevisiae_proteins-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to S. cerevisiae proteins from SGD, aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_UNIPROT_BLASTX]
height = 5
key = Other UniProt proteins
feature = protein_match:UniProt-BLASTX
bgcolor = orange
fgcolor = black
category = Sequence Similarity:Proteins
glyph = segments
citation = Matches to proteins from a slimmed-down version of UniProt (with proteins from WormBase core nematodes, human, fly and yeast removed), aligned with BLASTX (nucleotide to protein, via six-frame translation).


[SEQUENCE_SIMILARITY_WORMBASE_CORE_ESTS_AND_MRNAS_BEST]
link = sub { my $f = shift;
 my $source = $f->source;
 my $name = $f->name;
 return "/get?name=$name;class=Sequence";
 }

height = 4
key = WormBase nematode mRNAs/ESTs (best)
feature = expressed_sequence_match:BLAT_Caen_EST_BEST expressed_sequence_match:BLAT_Caen_mRNA_BEST
bgcolor = sub { my $f = shift;
 my $source = $f->source;;
 return 'lightblue' if $source eq 'BLAT_Caen_mRNA_BEST';
 return 'green' if $source eq 'BLAT_Caen_EST_BEST';
 }

fgcolor = black
label = 0
title = sub { my $f = shift;
 return $f->attributes('Species');
 }

connector = solid
category = Sequence Similarity:Nucleotide
glyph = segments
citation = ESTs and mRNAs from other WormBase core species aligned to the genome using <a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">BLAT</a>. This track shows the best location for each cDNA sequence. <p> mRNAs are shown in light blue; ESTs in green.


[SEQUENCE_SIMILARITY_WORMBASE_CORE_ESTS_AND_MRNAS_BEST:50000]
glyph = box


[SEQUENCE_SIMILARITY_WORMBASE_CORE_ESTS_AND_MRNAS_OTHER]
link = sub { my $f = shift;
 my $source = $f->source;
 my $name = $f->name;
 return "/get?name=$name;class=Sequence";
 }

height = 4
key = WormBase nematode mRNAs/ESTs (other)
feature = expressed_sequence_match:BLAT_Caen_EST_OTHER expressed_sequence_match:BLAT_Caen_mRNA_OTHER
bgcolor = sub { my $f = shift;
 my $source = $f->source;;
 return 'lightblue' if $source eq 'BLAT_Caen_mRNA_OTHER';
 return 'green' if $source eq 'BLAT_Caen_EST_OTHER';
 }

fgcolor = black
title = sub { my $feature = shift;
 return $feature->attributes('Species');
 }

category = Sequence Similarity:Nucleotide
label = 0
connector = solid
glyph = segments
citation = ESTs and mRNAs from other WormBase core species aligned to the genome using <a href="http://genome.cse.ucsc.edu/cgi-bin/hgBlat">BLAT</a>. This track shows non-unique matches, which may represent repetitive sequences. For the best single alignment, see the track labeled "WormBase nematode mRNAs and ESTs (best)". <p> mRNAs are shown in light blue; ESTs in green.


[SEQUENCE_SIMILARITY_WORMBASE_CORE_ESTS_AND_MRNAS_OTHER:50000]
glyph = box


[Spectrogram:plugin]
supress title = 1


[TRACK DEFAULTS]
utr_color = gainsboro
reversecolor = turquoise
forwardcolor = violet
label_transcripts = sub { shift->get_SeqFeatures('mRNA') > 1 }
empty_tracks = key
max segment = 2000000
font2color = blue
keystyle = between


[TranslationF]
arrow_height = 2
frame2 = darkblue
height = 20
key = 3-frame translation (forward)
global feature = 1
fgcolor = purple
frame1 = blue
strand = +1
start_codons = 0
category = DNA
translation = 3frame
frame0 = cadetblue
citation = This track shows the position of stop codons at low magnifications, and the 3-frame translation at high magnifications.  Only the forward strand is shown.
glyph = translation


[TranslationR]
arrow_height = 2
frame2 = crimson
height = 20
key = 3-frame translation (reverse)
global feature = 1
fgcolor = blue
frame1 = red
start_codons = 0
strand = -1
category = DNA
translation = 3frame
frame0 = darkred
citation = This track shows the position of stop codons at low magnifications, and the 3-frame translation at high magnifications.  Only the reverse strand is shown.
glyph = translation


[general]
link = /path/to/link
initial landmark = Cbre_Contig0:30000..60000
landmark features = supercontig region:Genomic_canonical region:link gene:landmark
description = C. brenneri (current release)
database = this_database
search attributes = note alias id
default tracks = GENES
examples = Cbre_contig200 Cbre_contig200:10000..30000 CBN30158 CBN301* npr-16 egl*


[this_database:database]
db_args = -adaptor DBI::mysql -dsn dbi:mysql:database=c_brenneri_PRJNA20035_WS247;host=localhost -user wormbase -pass sea3l3ganz
search options = default, +wildcard, -stem, +fulltext, +autocomplete
db_adaptor = Bio::DB::SeqFeature::Store


