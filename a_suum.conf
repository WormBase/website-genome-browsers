[GENERAL]
description = A. suum (current release)
database    = a_suum

# list of tracks to turn on by default
default features = AUGUSTUS CUFFLINKS GENEWISE GLEAN GLIMMERHMM SNAP

# The class of the objects used to establish the reference coordinates.
reference class  = Sequence

# examples to show in the introduction
examples = Scaffold122 Scaffold434 L4_01912 L3E_00612 L3E_03187 GS_00389

search attributes = Note Alias 

# "automatic" classes to try when an unqualified identifier is given
automatic classes = AUGUSTUS CUFFLINKS GENEWISE GLEAN GLIMMERHMM SNAP


# Various places where you can insert your own HTML -- see configuration docs
html1 =  sub { return CGI::h1(CGI::i('A. suum')); }

# Override the [DETAIL SELECT MENU] from detail_select_menu.conf
#include includes/detail_menu-default.conf

# Plugin configuration
#include includes/plugin.conf

########################
# Default glyph settings
########################

[TRACK DEFAULTS]
#remote renderer = http://localhost:8101 http://localhost:8102/ http://localhost:8103/
#remote renderer = http://206.108.125.173:8101 http://206.108.125.173:8102 http://206.108.125.173:8103
#                  http://206.108.125.174:8101 http://206.108.125.174:8102 http://206.108.125.174:8103
#                  http://206.108.125.175:8101 http://206.108.125.175:8102 http://206.108.125.175:8103
forwardcolor = violet
reversecolor = turquoise
utr_color    = gainsboro
font2color   = blue
height        = 10
label density = 100
bump density  = 500
label_transcripts = sub { shift->get_SeqFeatures('mRNA') > 1 }
label = 1
#link         =  AUTO

#################################
# database definitions
#################################

[a_suum:database]
db_adaptor  = Bio::DB::SeqFeature::Store
db_args     = -adaptor DBI::mysql
              -dsn a_suum
              -user nobody
passwd      =
search options = default +wildcard -stem +fulltext +autocomplete

################## TRACK CONFIGURATION ####################
# the remainder of the sections configure individual tracks
###########################################################



################################################
# GENE MODELS
################################################


[AUGUSTUS]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
#       # include includes/gene_models-core.track
key          = Augustus
feature      = gene:AUGUSTUS
glyph        = gene
category     = Genes
title    = sub { 
	 my $f = shift;
	 my $name = $f->name;
	 my $notes = f->notes;
	 return "A. suum: $name; $notes";
	 }
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
             return 'gray'   if $f->source =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    return join(';',$f->notes);
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 

[AUGUSTUS:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[AUGUSTUSCDS]
feature      = CDS:AUGUSTUS
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature "  }
key          = Augustus Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  


[CUFFLINKS]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# #include includes/gene_models-core.track
key          = Cufflinks
feature      = gene:Cufflinks
glyph        = gene
category     = Genes
title    = sub { 
	 my $f = shift;
	 my $name = $f->name;
	 my $notes = f->notes;
	 return "A. suum: $name; $notes";
	 }
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
             return 'gray'   if $f->source =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    return join(';',$f->notes);
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[CUFFLINKS:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[CUFFLINKSCDS]
feature      = CDS:Cufflinks
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature" }
key          = Cufflinks Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  



[GENEWISE]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# # include includes/gene_models-core.track
key          = GeneWise
feature      = gene:GeneWise
glyph        = gene
category     = Genes
title    = sub { 
	 my $f = shift;
	 my $name = $f->name;
	 my $notes = f->notes;
	 return "A. suum: $name; $notes";
	 }
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
             return 'gray'   if $f->source =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    return join(';',$f->notes);
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 



[GENEWISE:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[GENEWISECDS]
feature      = CDS:GeneWise
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature" }
key          = GeneWise Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  



[GLEAN]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.
# Core gene model configuration; height, bgcolor, category, key, etc.
# #include includes/gene_models-core.track
key          = GLEAN
feature      = gene:GLEAN
glyph        = gene
category     = Genes
title    = sub { 
	 my $f = shift;
	 my $name = $f->name;
	 my $notes = f->notes;
	 return "A. suum: $name; $notes";
	 }
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
             return 'gray'   if $f->source =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    return join(';',$f->notes);
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 



[GLEAN:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[GLEANCDS]
feature      = CDS:GLEAN
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature" }
key          = GLEAN Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  



[GLIMMER]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# #      include includes/gene_models-core.track
key          = GlimmerHMM
feature      = gene:GlimmerHMM
glyph        = gene
category     = Genes
title    = sub { 
	 my $f = shift;
	 my $name = $f->name;
	 my $notes = f->notes;
	 return "A. suum: $name; $notes";
	 }
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
             return 'gray'   if $f->source =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    return join(';',$f->notes);
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 




[GLIMMER:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[GLIMMERCDS]
feature      = CDS:GlimmerHMM
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature " }
key          = GlimmerHMM Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  


[SNAP]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# # include includes/gene_models-core.track
key          = SNAP
feature      = gene:SNAP
glyph        = gene
category     = Genes
title    = sub { 
	 my $f = shift;
	 my $name = $f->name;
	 my $notes = f->notes;
	 return "A. suum: $name; $notes";
	 }
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
             return 'gray'   if $f->source =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    return join(';',$f->notes);
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 

[SNAP:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[SNAPCDS]
feature      = CDS:SNAP
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature" }
key          = SNAP Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  






[BLAT]
# Include appropriate configuration. These MUST come first.
# Override any option by supplying it after the include.

# Core gene model configuration; height, bgcolor, category, key, etc.
# #  include includes/gene_models-core.track
key          = Blat
feature      = gene:blat
glyph        = gene
category     = Genes
title    = sub { 
	 my $f = shift;
	 my $name = $f->name;
	 my $notes = f->notes;
	 return "A. suum: $name; $notes";
	 }
bgcolor      = sub {
	     my $f = shift;
	     return 'gray'   if $f->method =~ /pseudogene/i;
             return 'gray'   if $f->source =~ /pseudogene/i;
	     return 'violet' if $f->strand > 0;
	     return 'turquoise';
	     }
fgcolor      = black
utr_color    = gray
font2color   = blue
height  = sub {
	my $feature = shift;
	return $feature->method =~  /transcript|UTR|coding_exon/i ? 10 : 6;
	}
label        = sub {
               	my $f = shift;
	       	my $label = $f->name;
	       	my ($locus) = $f->attributes('Locus');	
	       	$label .= " ($locus)" if $locus;
	       	return $label;
	}
description = sub {
	    my $f = shift;
	    return join(';',$f->notes);
	    my ($alias) = $f->attributes('Alias');
	    my ($status) = $f->attributes('Status');	      
	    unless ($alias) {
         	    ($alias) = $f->attributes('Locus');
            }
	    $alias =~ s/^\w\w\w\w-//g;
	    my @values;
	    push @values, "C. elegans ortholog: $alias" if $alias;
	    push @values,$f->notes;
	    push @values,$status if $status;
	    return join("; ",@values); 
	    }
citation     = 


[BLAT:150000]
glyph        = generic
strand_arrow = 1
bgcolor      = sub {shift->strand>0?'violet':'turquoise'}
description = 0

[BLATCDS]
feature      = CDS:blat
#feature      = coding:curated
#feature      = coding:Coding_transcript
glyph        = cds
frame0f      = cadetblue
frame1f      = blue
frame2f      = darkblue
frame0r      = darkred
frame1r      = red
frame2r      = crimson
category     = Genes
description  = 0
require_subparts = 1
height       = 13
label        = sub { my $feature = shift; return "Frame usage for $feature "  }
key          = Blat Coding Segments
citation     = This track shows the reading frames of coding segments (also known as "CDS" features).  




################################################
# DNA
################################################
#include includes/dna.track




################################################
# REPEATS
################################################
[REPEATS]
feature       = repeat_region
bgcolor       = sub { 
	      my $f = shift;
	      my $source = $f->source;
	      if ($source eq 'TRF') {
	      	  return 'blue';
	      } elseif ($source eq 'Dust',
	          return 'green';
	      } else {
                  return 'yellow';
	      }
fgcolor       = black
category      = Misc
height        = 4
key           = Repeat regions
connector     = none
description   = sub {
	my $f = shift;
	my ($ref,$start,$stop) = ($f->ref,$f->start,$f->stop);
	my $method = $f->method;
	$method =~ s/_/ /g;
	return join('; ',$f->notes,"$ref: $start..$stop");
	}
label         = sub {
	my $f = shift;
	my $method = $f->method;
	$method =~ s/_/ /g;
	return $method;
	}
link          = 0
citation      = This track indicates the position of repeats identified by TRF (in blue), Dust (in green), and RepeatMasker (in yellow).


################################################
# PROTEIN MATCHES
################################################
#include includes/protein_matches.track

