blueHeatMap = function(feature) {
    var score = feature.get('score');
    if(score>0.2) {score = 0.2;}
    if (score <0.01) {score = 0.01;}
    var blueness = 255*(0.2-score)/0.2;
    var color = '#' + (Math.round(blueness)).toString(16) + (Math.round(blueness)).toString(16) + 'FF';
    return color;  }

snyderHeatMap = function(feature) {
    var score = feature.get('score');
    var logscore = -Math.log(score);
    if(logscore>255) {logscore = 255;}
    if (logscore <1) {logscore = 1;}
    var blueness = 255*(logscore)/255;
    var color = '#' + (Math.round(blueness)).toString(16) + (Math.round(blueness)).toString(16) + 'FF';
    return color;  }

geneColor = function(feature) {
    var type = feature.get('type');
    if (type.match(/exon/)) {return 'gray';}
    var strand = feature.get('strand');
    if (strand ==1) {return 'turquoise';}
    if (strand == -1) {return 'violet';} 
    return 'gray'; }

matchColor = function(f) {
    var source = f.get('source');
    if (source.match('BLAT_mRNA_')) {return 'yellow';}
    return 'grey'; }

variationColor = function(f) {
    var consequence = f.get('consequence');
    if (typeof consequence === 'undefined'){ consequence = ''; }
    if (consequence.match(/missense/i))    {return 'green';}
    if (consequence.match(/coding_exon/i)) {return 'yellow';}
    if (consequence.match(/nonsense/i))    {return 'red';}
    if (consequence.match(/frameshift/i))  {return 'blue';}
    return 'white'; }

rstColor = function(f) {
    var name = f.get('Clone');
    if (name&&name.match('RST5')) {return 'green'; }
    return 'red'; }

nematodeColor = function(f) {
    var source = f.get('source');
    if (source.match('BLAT_Caen_mRNA')) {return 'lightblue';}
    return 'green';  }

geneURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var type = f.get('type');
    var source = f.get('source');
    if (type == 'ncRNA' && source == 'RNAz') {return; }
    var name = f.get('name');
    if (type == 'gene') {return wburl+'/get?name='+name+';class=Gene'; }
    return;}

simpleGeneURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var name = f.get('Name');
    return wburl+'/get?name='+name+';class=Gene';}

targetURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var clone = f.get('clone');
    return wburl+'/get?name='+clone+';class=Sequence'; }

proteinURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var target = f.get('Target'); 
    var name = target.match(/\S+/)[0];
    return wburl+'/get?name='+name+';class=protein'; }

variationURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var name = f.get('variation');
    return wburl+'/db/get?name='+name+';class=Variation'; }

motifURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var name = f.get('Protein');
    return wburl+'/get?name='+name+';class=protein'; }

expressionURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org/species/all/expr_pattern/';
    var target = f.get('Target');
    var name = target.match(/\S+/)[0];
    return wburl+name; }

expressionProfileURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org/species/all/sequence/';
    var name = f.get('Name');
    return wburl+name;}

featureURL =  function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var name = f.get('Name');
    return wburl+'/get?name='+name+';class=Feature';
    }

sequenceURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var name = f.get('Name');
    return wburl+'/get?name='+name+';class=Sequence';
    }

bindingsiteURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var note = f.get('Note');
    var match = /Predicted binding site for (.*)/.exec(note);
    var gene = match[1];
    if (!(typeof gene === 'undefined'))
        {return wburl+'/get?name='+gene+';class=Gene'; }    
    var source = f.get('source');
    if (source == 'PicTar')
        {return 'http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode';}
    if (source == 'miRanda') 
        {return 'http://microrna.sanger.ac.uk/targets/v3/';}
    var name = f.get('Name');
    return wburl+'/get?name='+name+';class=Feature';
    }



geneGlyph = function(f) {
    var biotype = f.get('biotype');
    if (biotype=='tRNA')  {return 'JBrowse/View/FeatureGlyph/TRNAGene';}
    if (biotype=='snoRNA'){return 'JBrowse/View/FeatureGlyph/SnoRNAGene';}
    if (biotype=='snRNA') {return 'JBrowse/View/FeatureGlyph/SnRNAGene';}
    if (biotype=='scRNA') {return 'JBrowse/View/FeatureGlyph/ScRNAGene';}
    if (biotype=='rRNA')  {return 'JBrowse/View/FeatureGlyph/RRNAGene';}
    if (biotype=='piRNA') {return 'JBrowse/View/FeatureGlyph/PiRNAGene';}
    if (biotype=='miRNA') {return 'JBrowse/View/FeatureGlyph/MiRNAGene';}
    if (biotype=='lincRNA'){return 'JBrowse/View/FeatureGlyph/LincRNAGene';}
    if (biotype=='ncRNA') {return 'JBrowse/View/FeatureGlyph/NcRNAGene';}
    if (biotype=='ncRNA') {return 'JBrowse/View/FeatureGlyph/NcRNAGene';}
    if (biotype=='asRNA') {return 'JBrowse/View/FeatureGlyph/AntisenseRNAGene';}
    if (biotype=='pseudogene') {return 'JBrowse/View/FeatureGlyph/PseudoGene';}
    return 'JBrowse/View/FeatureGlyph/Gene'; }

typeDescription = function(f) {
    var type = f.get('type');
    var str = type.replace(/_/g, ' ');
    return str; }

nematodeLabel = function(f) {var species = f.get('species'); return species; }

geneLabel = function(f) {
    var aliases = f.get('Alias');
    var locus;
    if (Array.isArray(aliases)) {locus = aliases[0];  }
        else {locus = aliases;}
    var name = f.get('sequence_name');
    if (locus == name) {return name; }
    if (typeof locus === 'undefined') {return name;} 
    return locus+' ('+name+')';  }

massSpecLabel = function(f) {
    var target = f.get('Target');
    var name = target.replace('MSP:', '');
    var newname = name.match(/\S+/)[0];
    return newname; }

massSpecURL = function(f) {
    var target = f.get('Target'); 
    var name = target.match(/\S+/)[0];
    var wburl = 'http://staging.wormbase.org';
    return wburl+'/get?name='+name+';class=Mass_spec_peptide'; }

ostURL = function(track,f) {
    var name = f.get('Name');
    var plateid;
    var matches = name.match(/OST[FR](\d{3})([A-H]\d+)/ );
    if(Array.isArray(matches)) {
        plateid = '10' + matches[1] + '@' + matches[2];}
    matches = name.match(/OST[FR](\d{5})([A-H]\d+)/);
    if(Array.isArray(matches)) {
        plateid = matches[1] + '@' + matches[2];}
    return 'http://worfdb.dfci.harvard.edu/searchallwormorfs.pl?by=plate&sid='+plateid; }

modencodeURL = function(track,f) {
    var note = f.get('Note');
    return 'http://intermine.modencode.org/release-32/keywordSearchResults.do?searchTerm=' + note + '&searchSubmit=GO'; }


