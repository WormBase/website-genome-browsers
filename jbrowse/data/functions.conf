blueHeatMap = function(feature) {
    var score = feature.get('score');
    var max = 0.2;
    var min = 0.0001;
    if(score>max) {score = max;}
    if (score <min) {score = min;}
    var blueness = 204*((score-min)/(max-min));
    var hex = Math.round(blueness).toString(16);
    if (hex.length < 2) { hex = '0' + hex; }
    var color = '#' + hex + hex + 'FF';
    return color;  }

rainbowHeatMap = function(feature) {
    var score = feature.get('score');
    var max = 0.01;
    var min = 2.50;
    if(score<max) {score = max;}
    if (score >min) {score = min;}
    var blueness = 190*((score-min)/(max-min));
    var hex = Math.round(blueness).toString(16);
    if (hex.length < 2) { hex = '0' + hex; }
    var color = '#' + hex + hex + 'DD';
    return color;  }

parentRainbowHeatMap = function(feature) {
    var score = feature._parent.get('score');
    var max = 0.01;
    var min = 2.50;
    if(score<max) {score = max;}
    if (score >min) {score = min;}
    var blueness = 190*((score-min)/(max-min));
    var hex = Math.round(blueness).toString(16);
    if (hex.length < 2) { hex = '0' + hex; }
    var color = '#' + hex + hex + 'DD';
    return color;  }

snyderHeatMap = function(feature) {
    var score = feature.get('score');
    var max = 0.0025;
    var min = 0.000001;
    if(score>max) {score = max;}
    if (score <min) {score = min;}
    var blueness = 204*((score-min)/(max-min));
    var hex = Math.round(blueness).toString(16);
    if (hex.length < 2) { hex = '0' + hex; }
    var color = '#' + hex + hex + 'FF';
    return color;  }

logHeatMap = function(feature) {
    var score = feature.get('score');
    var logscore = -Math.log(score);
    if(logscore>255) {logscore = 255;}
    if (logscore <1) {logscore = 1;}
    var blueness = 255*(logscore)/255;
    var color = '#' + (Math.round(blueness)).toString(16) + (Math.round(blueness)).toString(16) + 'FF';
    return color;  }

geneColor = function(feature) {
    var type = feature.get('type');
    if (type.match(/exon/)) {return 'gray';}
    if (type.match(/pseudo/)) {return 'gray';}
    var strand = feature.get('strand');
    if (strand == -1) {return 'turquoise';}
    if (strand ==  1) {return 'violet';} 
    return 'gray'; }

exonColor = function(f) {
    var strand = f.get('strand');
    if (strand == -1) {return 'turquoise';}
    if (strand ==  1) {return 'violet';}
    return 'gray';
    }

matchColor = function(f) {
    var source = f.get('source');
    if (source.match('BLAT_mRNA_')) {return 'yellow';}
    return 'grey'; }

variationColor = function(f) {
    var consequence = f.get('consequence');
    if (typeof consequence === 'undefined'){ consequence = ''; }
    if (consequence.match(/missense/i))    {return 'green';}
    if (consequence.match(/coding_exon/i)) {return 'yellow';}
    if (consequence.match(/nonsense/i))    {return 'red';}
    if (consequence.match(/frameshift/i))  {return 'blue';}
    return 'white'; }

rstColor = function(f) {
    var name = f.get('Clone');
    if (name&&name.match('RST5')) {return 'green'; }
    return 'red'; }

nematodeColor = function(f) {
    var source = f.get('source');
    if (source.match('BLAT_Caen_mRNA')) {return 'lightblue';}
    return 'green';  }

geneURL = function(track,f) {
    var type = f.get('type');
    var source = f.get('source');
    if (type == 'ncRNA' && source == 'RNAz') {return; }
    var name = f.get('name');
    if (type == 'gene') {return '/get?name='+name+';class=Gene'; }
    return;}

simpleGeneURL = function(track,f) {
    var name = f.get('Name');
    return '/get?name='+name+';class=Gene';}

transcriptURL = function(track,f) {
    var parent = f.get('gene');
    return '/get?name='+parent+';class=Gene';}

targetURL = function(track,f) {
    var clone = f.get('clone');
    return '/get?name='+clone+';class=Sequence'; }

proteinURL = function(track,f) {
    var target = f.get('Target'); 
    var name = target.match(/\S+/)[0];
    return '/get?name='+name+';class=protein'; }

variationURL = function(track,f) {
    var name = f.get('variation');
    return '/db/get?name='+name+';class=Variation'; }

motifURL = function(track,f) {
    var name = f.get('protein');
    return '/get?name='+name+';class=protein'; }

expressionURL = function(track,f) {
    var wburl = '/species/all/expr_pattern/';
    var name = f.get('Name');
    return wburl+name; }

expressionProfileURL = function(track,f) {
    var wburl = '/species/all/sequence/';
    var name = f.get('Name');
    return wburl+name;}

featureURL =  function(track,f) {
    var name = f.get('Name');
    return '/get?name='+name+';class=Feature';
    }

sequenceURL = function(track,f) {
    var name = f.get('Name');
    return '/get?name='+name+';class=Sequence';
    }

bindingsiteURL = function(track,f) {
    var note = f.get('Note');
    var match = /Predicted binding site for (.*)/.exec(note);
    var gene = match[1];
    if (!(typeof gene === 'undefined')) {
        var patt = /craCele/;
        if (patt.test(gene) ) {
            return 'http://www.cisred.org/c.elegans4/search_form?form.submitted=1;search_type=Gene%20Id%20Search;submit=GO;gene_id='+gene; }
        return '/get?name='+gene+';class=Gene'; }    
    var source = f.get('source');
    if (source == 'PicTar')
        {return 'http://pictar.bio.nyu.edu/cgi-bin/new_PicTar_nematode.cgi?species=nematode';}
    if (source == 'miRanda') 
        {return 'http://microrna.sanger.ac.uk/targets/v3/';}
    var name = f.get('Name');
    return '/get?name='+name+';class=Feature';
    }

geneGlyph = function(f) {
    var biotype = f.get('biotype');
    if (biotype=='tRNA')  {return 'JBrowse/View/FeatureGlyph/TRNAGene';}
    if (biotype=='snoRNA'){return 'JBrowse/View/FeatureGlyph/SnoRNAGene';}
    if (biotype=='snRNA') {return 'JBrowse/View/FeatureGlyph/SnRNAGene';}
    if (biotype=='scRNA') {return 'JBrowse/View/FeatureGlyph/ScRNAGene';}
    if (biotype=='rRNA')  {return 'JBrowse/View/FeatureGlyph/RRNAGene';}
    if (biotype=='piRNA') {return 'JBrowse/View/FeatureGlyph/PiRNAGene';}
    if (biotype=='miRNA') {return 'JBrowse/View/FeatureGlyph/MiRNAGene';}
    if (biotype=='lincRNA'){return 'JBrowse/View/FeatureGlyph/LincRNAGene';}
    if (biotype=='ncRNA') {return 'JBrowse/View/FeatureGlyph/NcRNAGene';}
    if (biotype=='ncRNA') {return 'JBrowse/View/FeatureGlyph/NcRNAGene';}
    if (biotype=='asRNA') {return 'JBrowse/View/FeatureGlyph/AntisenseRNAGene';}
    if (biotype=='pseudogene') {return 'JBrowse/View/FeatureGlyph/PseudoGene';}
    return 'JBrowse/View/FeatureGlyph/Gene'; }

typeDescription = function(f) {
    var type = f.get('type');
    var str = type.replace(/_/g, ' ');
    return str; }

nematodeLabel = function(f) {var species = f.get('species'); return species; }

geneLinkLabel = function(track,f) {
    var type = f.get('type');
    var patt = /RNA|transcript/;
    if (patt.test(type)) {return f.get('Name');}
    var aliases = f.get('Alias');
    var locus;
    if (Array.isArray(aliases)) {locus = aliases[0];  }
        else {locus = aliases;}
    var name = f.get('sequence_name');
    if (locus == name) {return name; }
    if (typeof locus === 'undefined') {return name;}
    return locus+' ('+name+')';  }

geneLabel = function(f) {
    var type = f.get('type');
    var patt = /RNA|transcript/;
    if (patt.test(type)) {return f.get('Name');}
    var aliases = f.get('Alias');
    var locus;
    if (Array.isArray(aliases)) {locus = aliases[0];  }
        else {locus = aliases;}
    var name = f.get('sequence_name');
    if (locus == name) {return name; }
    if (typeof locus === 'undefined') {return name;} 
    if (name == 'undefined' || typeof name === 'undefined' ) {return locus;}
    return locus+' ('+name+')';  }

massSpecLabel = function(f) {
    var target = f.get('Target');
    var name = target.replace('MSP:', '');
    var newname = name.match(/\S+/)[0];
    return newname; }

massSpecURL = function(f) {
    var target = f.get('Target'); 
    var name = target.match(/\S+/)[0];
    return '/get?name='+name+';class=Mass_spec_peptide'; }

ostURL = function(track,f) {
    var name = f.get('Name');
    var plateid;
    var matches = name.match(/OST[FR](\d{3})([A-H]\d+)/ );
    if(Array.isArray(matches)) {
        plateid = '10' + matches[1] + '@' + matches[2];}
    matches = name.match(/OST[FR](\d{5})([A-H]\d+)/);
    if(Array.isArray(matches)) {
        plateid = matches[1] + '@' + matches[2];}
    return 'http://worfdb.dfci.harvard.edu/searchallwormorfs.pl?by=plate&sid='+plateid; }

modencodeURL = function(track,f) {
    var note = f.get('Note');
    return 'http://intermine.modencode.org/release-32/keywordSearchResults.do?searchTerm=' + note + '&searchSubmit=GO'; }

variationsBalloon = function() {
                   var f = this.feature;
                   var type = f.get('type');
                   type = type.replace(/_/g, ' ');
                   var name        = f.get('public_name');
                   var consequence = f.get('consequence');
                   var ref   = this.track.refSeq.name;
                   var start = f.get('start');
                   var stop  = f.get('end');
                   var status    = f.get('status');
                   var nt_change = f.get('substitution');
                   if (typeof nt_change === 'undefined') { nt_chang = f.get('insertion');}
                   var aa_change = f.get('aachange');
                   var interpolated_map_position = f.get('interpolated_map_position');
                   var source = f.get('source');
                   source = source.replace('_Polymorphisms','');
                   source = source.replace(/_/g, ' ');
                   var notes = '<b>Allele: '+name+'</b><br />';
                   notes     = notes + 'type: '+type+'<br />';
                   if (status) { 
                   notes     = notes + 'status: '+status+'<br />';
                   }
                   notes     = notes + 'position: '+ref+':'+start+'..'+stop+'<br />';
                   if (nt_change) {
                   notes     = notes + 'nucleotide change: '+nt_change+'<br />';
                   }
                   if (aa_change) {
                   notes     = notes + 'amino acid change: '+aa_change+'<br />';
                   }
                   if (consequence) {
                   consequence = consequence.replace(/_/g, ' ');
                   notes     = notes + 'consequence: '+consequence+'<br />';
                   }
                   if (interpolated_map_position) {
                   notes     = notes + 'interpolated map position: '+interpolated_map_position+'<br />';
                   }
                   var strains = f.get('strain');
                   if( Array.isArray(strains)) {
                       strains = strains.join();
                   }
                   if (strains) {
                   notes     = notes + 'strains: '+strains+'<br />';
                   }
                   notes     = notes + 'source: '+source+'<br />';
                   return notes; }

expressionPatternBalloon = function() { var name = this.feature.get('Name');var url = '/tools/genome/jbrowse/images/expression/assembled/'+name+'.png'; var rtnString; require(['dojo/request'],function(request) {request(url,{sync:true}).then(function(text) { rtnString = '<img width=250 src='+url+'>'; },function(error){rtnString = 'Expression pattern not found<br>We are working on getting a new image';  }); }); return rtnString; }

rnaseqReads = function () {var score = this.feature.get('score'); return score + ' reads';}

miRNABalloon = function() {var score = this.feature.get('score'); var name = this.feature.get('Name'); if (score>0) {return name +' (Score: '+score+')';} return name;  }

