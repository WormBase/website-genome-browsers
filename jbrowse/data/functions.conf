geneColor = function(feature) {
    var type = feature.get('type');
    if (type.match(/exon/)) {return 'gray';}
    var strand = feature.get('strand');
    if (strand ==1) {return 'turquoise';}
    if (strand == -1) {return 'violet';} 
    return 'gray'; }

matchColor = function(f) {
    var source = f.get('source');
    if (source.match('BLAT_mRNA_')) {return 'yellow';}
    return 'grey'; }

variationColor = function(f) {
    var consequence = f.get('consequence');
    if (typeof consequence === 'undefined'){ consequence = ''; }
    if (consequence.match(/missense/i))    {return 'green';}
    if (consequence.match(/coding_exon/i)) {return 'yellow';}
    if (consequence.match(/nonsense/i))    {return 'red';}
    if (consequence.match(/frameshift/i))  {return 'blue';}
    return 'white'; }

geneURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var type = f.get('type');
    var source = f.get('source');
    if (type == 'ncRNA' && source == 'RNAz') {return; }
    var name = f.get('name');
    if (type == 'gene') {return wburl+'/get?name='+name+';class=Gene'; }
    return;}

simpleGeneURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var name = f.get('Name');
    return wburl+'/get?name='+name+';class=Gene';}

targetURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var clone = f.get('clone');
    return wburl+'/get?name='+clone+';class=Sequence'; }

proteinURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var target = f.get('Target'); 
    var name = target.match(/\S+/)[0];
    return wburl+'/get?name='+name+';class=protein'; }

variationURL = function(track,f) {
    var wburl = 'http://staging.wormbase.org';
    var name = f.get('variation');
    return wburl+'/db/get?name='+name+';class=Variation'; }

geneGlyph = function(f) {
    var biotype = f.get('biotype');
    if (biotype=='tRNA')  {return 'JBrowse/View/FeatureGlyph/TRNAGene';}
    if (biotype=='snoRNA'){return 'JBrowse/View/FeatureGlyph/SnoRNAGene';}
    if (biotype=='snRNA') {return 'JBrowse/View/FeatureGlyph/SnRNAGene';}
    if (biotype=='scRNA') {return 'JBrowse/View/FeatureGlyph/ScRNAGene';}
    if (biotype=='rRNA')  {return 'JBrowse/View/FeatureGlyph/RRNAGene';}
    if (biotype=='piRNA') {return 'JBrowse/View/FeatureGlyph/PiRNAGene';}
    if (biotype=='miRNA') {return 'JBrowse/View/FeatureGlyph/MiRNAGene';}
    if (biotype=='lincRNA'){return 'JBrowse/View/FeatureGlyph/LincRNAGene';}
    if (biotype=='ncRNA') {return 'JBrowse/View/FeatureGlyph/NcRNAGene';}
    if (biotype=='ncRNA') {return 'JBrowse/View/FeatureGlyph/NcRNAGene';}
    if (biotype=='asRNA') {return 'JBrowse/View/FeatureGlyph/AntisenseRNAGene';}
    if (biotype=='pseudogene') {return 'JBrowse/View/FeatureGlyph/PseudoGene';}
    return 'JBrowse/View/FeatureGlyph/Gene'; }

typeDescription = function(f) {
    var type = f.get('type');
    var str = type.replace(/_/g, ' ');
    return str; }

geneLabel = function(f) {
    var aliases = f.get('Alias');
    var locus;
    if (Array.isArray(aliases)) {locus = aliases[0];  }
        else {locus = aliases;}
    var name = f.get('sequence_name');
    if (locus == name) {return name; }
    if (typeof locus === 'undefined') {return name;} 
    return locus+' ('+name+')';  }
